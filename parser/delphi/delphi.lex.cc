#line 2 "source/parser/delphi/delphi.lex.cc"

#line 4 "source/parser/delphi/delphi.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer delphi_create_buffer
#define yy_delete_buffer delphi_delete_buffer
#define yy_flex_debug delphi_flex_debug
#define yy_init_buffer delphi_init_buffer
#define yy_flush_buffer delphi_flush_buffer
#define yy_load_buffer_state delphi_load_buffer_state
#define yy_switch_to_buffer delphi_switch_to_buffer
#define yyin delphiin
#define yyleng delphileng
#define yylex delphilex
#define yylineno delphilineno
#define yyout delphiout
#define yyrestart delphirestart
#define yytext delphitext
#define yywrap delphiwrap
#define yyalloc delphialloc
#define yyrealloc delphirealloc
#define yyfree delphifree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE delphirestart(delphiin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int delphileng;

extern FILE *delphiin, *delphiout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up delphitext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up delphitext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via delphirestart()), so that the user can continue scanning by
	 * just pointing delphiin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when delphitext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int delphileng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow delphiwrap()'s to do buffer switches
 * instead of setting up a fresh delphiin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void delphirestart (FILE *input_file  );
void delphi_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE delphi_create_buffer (FILE *file,int size  );
void delphi_delete_buffer (YY_BUFFER_STATE b  );
void delphi_flush_buffer (YY_BUFFER_STATE b  );
void delphipush_buffer_state (YY_BUFFER_STATE new_buffer  );
void delphipop_buffer_state (void );

static void delphiensure_buffer_stack (void );
static void delphi_load_buffer_state (void );
static void delphi_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER delphi_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE delphi_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE delphi_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE delphi_scan_bytes (yyconst char *bytes,int len  );

void *delphialloc (yy_size_t  );
void *delphirealloc (void *,yy_size_t  );
void delphifree (void *  );

#define yy_new_buffer delphi_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        delphiensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            delphi_create_buffer(delphiin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        delphiensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            delphi_create_buffer(delphiin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define delphiwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *delphiin = (FILE *) 0, *delphiout = (FILE *) 0;

typedef int yy_state_type;

extern int delphilineno;

int delphilineno = 1;

extern char *delphitext;
#define yytext_ptr delphitext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up delphitext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	delphileng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[665] =
    {   0,
      128,  128,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  157,  155,  153,  154,  155,  155,
      152,  152,    1,  152,  150,  152,  155,  152,  155,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  152,
       16,   11,   10,   11,   15,   14,   15,   19,   18,   17,
      156,  156,  156,  156,  133,  156,  135,  136,  137,  138,

      143,  146,  147,  144,  145,  139,  156,  140,  142,  153,
      154,    4,   12,    5,  126,  150,    8,    2,  127,  122,
      125,  124,  123,  128,  128,  128,  128,  128,   64,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       65,  128,  128,  128,  128,  128,  128,  128,  128,   86,
      128,   55,   69,  128,  128,  128,  128,  128,  128,  115,
       68,   57,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,   33,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,    0,    9,   13,    0,    0,
        0,  133,  133,    0,  135,  135,  137,  137,    0,    0,

        0,    0,    0,    0,  141,  140,  140,    4,    6,    5,
        7,    2,    3,  128,   59,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   60,
      128,  128,  128,  128,   31,  128,  128,  128,  128,  128,
       66,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       61,   56,  128,   54,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  113,   62,  128,   63,
      128,  128,  128,  128,  128,  128,  128,  128,   99,  128,
      128,  128,  128,   67,  128,  128,  128,  128,   58,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  148,

      141,  128,  128,  128,  128,  128,   39,  128,   35,  128,
       40,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       87,  128,  128,  128,  121,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,   72,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,   88,  128,
       38,  118,   25,  128,   26,  128,  128,   42,  128,    0,
      130,    0,    0,    0,  143,  146,  147,    0,    0,    0,
      149,  128,  128,  114,   30,  128,  128,   93,   98,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   37,

      128,  128,  128,   82,  128,  128,   52,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,   90,  128,
       91,   74,    0,  131,    0,    0,    0,    0,    0,  128,
      128,  128,  128,  128,  128,  128,  128,   83,  128,   50,
       32,  128,   81,  128,  128,  128,  128,  128,  128,  128,
      128,  128,   23,  128,  128,  128,  128,  128,  128,  128,
      111,   92,  128,  128,  128,  128,  128,  104,  128,  128,
      112,  128,  128,   89,  128,  128,   48,  128,  128,   76,

       21,  128,  128,  128,    0,    0,    0,    0,    0,    0,
      128,  128,   36,  128,  128,  128,   70,  128,  128,  109,
      128,  128,  100,  128,  128,  128,  128,   47,  128,   46,
      128,  117,  128,  128,  128,   24,  106,  128,   22,  128,
      128,  128,  128,  128,  128,  128,  128,  128,   94,  128,
      128,   79,  128,    0,    0,    0,  143,  144,  145,  110,
       78,   45,  128,   49,  128,  128,   51,  128,  120,  128,
      128,  128,  128,   44,  128,   96,   97,  128,  107,  128,
      128,   73,   77,  128,   95,   41,   43,  128,  128,  128,
        0,    0,    0,  128,  128,  128,  128,  128,  101,  128,

       85,   71,  119,  105,  108,  128,  128,   80,   75,    0,
        0,    0,  128,  103,  128,  128,  128,   34,  128,  128,
       20,    0,  132,  134,  102,  128,  128,  128,  128,  116,
        0,  128,   29,  128,  128,    0,   84,  128,  128,    0,
       27,   28,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  129,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    4,    1,    5,    1,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   14,   14,
       14,   15,   14,   16,   14,   14,   14,   17,   11,   18,
       19,   20,   21,   11,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       31,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,    1,   48,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   31,   60,   61,   62,   63,
       64,   65,   31,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    3,    1,    4,    4,    4,    1,    1,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[685] =
    {   0,
        0,    0,   75,   76,   77,   78,   79,   84,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   62,
      161,  238,  315,  392,  662,  660,  469,  546,  657,  604,
       70,   73,  603,  602,  600,  599,    0,    0,  623,  700,
      596,  595,    0,    0,  601, 4321,  598,  596,  593,  589,
      588, 4321,   95,   91,  100,  570,   71,  566,  565,  764,
      708,  819,  875,  721,  935,  105,  991,  169,  246,  323,
     1045,  774,  172, 1102, 1157,  843,  249,  239,  400,  535,
     4321, 4321, 4321,  521, 4321, 4321,  525, 4321, 4321, 4321,
     4321,   83,  106,  133,  123,  164,  129, 4321,  132, 4321,

      154,  163,  172,  160,  156, 4321,  135,  197, 4321,  526,
      523,  522, 4321,  521,  188,  276, 4321,  520, 4321, 4321,
     4321, 4321, 4321,  216,  326,  716,  329,  477,  334,  403,
      554,  724,  847,  406,  412,  480,  557,  631,  888,  893,
      795,  804,  902,  483,  745,  634,  958,  963,  952,  409,
      736, 1217,  489,  560,  974,  908,  563,  967, 1017,  566,
      637,  640,  996, 1024,  792, 1029, 1272, 1083, 1054, 1130,
     1091,  643, 1162, 1203,  646, 1195, 1240, 1267, 1133, 1223,
     1277, 1298, 1304, 1325, 1330,  510, 4321, 4321,  168,  183,
      239,    0,  353,  243,    0,  430,    0,  138,  231,  256,

      236,  252,  249,  505,  512,  500,  341,  498, 4321,  462,
     4321,  452, 4321, 1336,  712, 1105, 1344, 1348, 1351, 1374,
     1396, 1399, 1403, 1377, 1415, 1418, 1421, 1424, 1443, 1050,
     1447, 1461, 1472, 1475, 1234, 1488, 1491, 1505, 1513, 1520,
     1517, 1533, 1544, 1538, 1559, 1566, 1575, 1581, 1596, 1604,
     1607, 1612, 1622, 1625, 1635, 1644, 1650, 1664, 1721, 1672,
     1667, 1675, 1682, 1693, 1704, 1737, 1732, 1750, 1753, 1761,
     1765, 1780, 1783, 1790, 1794, 1802, 1831, 1834, 1811, 1848,
     1852, 1855, 1861, 1879, 1892, 1901, 1911, 1907, 1923,  446,
      320,  319,  325,  327,  328,  391,  411,  470,  480,   90,

      450, 1930, 1934, 1938, 1952, 1955, 1962, 1978, 1981, 2002,
     2005, 2008, 2011, 2018, 2024, 2034, 2027, 2055, 2067, 2075,
     2080, 2083, 2088, 2113, 2096, 2099, 2126, 2129, 2138, 2142,
     2155, 2159, 2175, 2181, 2185, 2202, 2207, 2222, 2251, 2254,
     2264, 2235, 2278, 2281, 2284, 2297, 2304, 2307, 2310, 2336,
     2347, 2350, 2356, 2366, 2369, 2393, 2379, 2375, 2397, 2406,
     2417, 2421, 2425, 2435, 2438, 2445, 2448, 2462, 2465,  438,
     4321,  481,  483,  485,  487, 4321, 4321,  561,  392,  130,
     4321, 2468, 2478, 2490, 2507, 2510, 2519, 2527, 2530, 2533,
     2537, 2548, 2551, 2560, 2589, 2592, 2602, 2597, 2610, 2634,

     2639, 2643, 2660, 2663, 2666, 2689, 2671, 2692, 2714, 2717,
     2721, 2729, 2735, 2738, 2758, 2761, 2767, 2782, 2785, 2788,
     2798, 2811, 2815, 2825, 2843, 2829, 2855, 2858, 2869, 2872,
     2899, 2886, 2913, 2916, 2909, 2937, 2957, 2940, 2676, 2962,
     2965, 2981,  442, 4321,  552,  556,  641,  719,  738, 2984,
     2987, 2994, 3004, 3027, 3032, 3044, 3047, 3051, 3058, 3064,
     3072, 3075, 3088, 3091, 3104, 3095, 3115, 3121, 3141, 3144,
     3147, 3168, 3158, 3172, 3185, 3188, 3211, 3214, 3217, 3231,
     3234, 3239, 3244, 3259, 3262, 3276, 3287, 3290, 3303, 3306,
     3299, 3315, 3332, 3319, 3343, 3336, 3348, 3359, 3364, 3369,

     3373, 3376, 3387, 3392,  427,  772,  778,  694,  770,  793,
     3414, 3417, 3397, 3401, 3429, 3444, 3456, 3459, 3476, 3462,
     3482, 3489, 3472, 3499, 3509, 3527, 3505, 3531, 3536, 3542,
     3551, 3554, 3564, 3559, 3580, 3584, 3596, 3601, 3604, 3607,
     3622, 3629, 3613, 3626, 3645, 3667, 3673, 3682, 3659, 3687,
     3692, 3696, 3711,  441,  787,  803, 4321, 4321, 4321, 3715,
     3719, 3724, 3737, 3740, 3743, 3748, 3752, 3766, 3769, 3780,
     3785, 3797, 3807, 3810, 3813, 3822, 3826, 3830, 3836, 3850,
     3853, 3868, 3873, 3876, 3879, 3882, 3894, 3897, 3900, 3919,
      422,  821,  824, 3925, 3905, 3938, 3943, 3962, 3965, 3981,

     3971, 3984, 3990, 3993, 4002, 4009, 4021, 4030, 4033,  421,
      415,  413, 4040, 4049, 4052, 4061, 4070, 4077, 4093, 4098,
     4080,  381, 4321, 4321, 4101, 4107, 4120, 4126, 4148, 4130,
      305, 4151, 4158, 4173, 4176,  372, 4179, 4189, 4199,  365,
     4203, 4206,  365,  351,  364,  364,  345,  330,  300,  282,
      246,  240,  269,  226,  262,  230,  219,  141,  212,  208,
      207,  174, 4321, 4321, 4262, 4266, 4270, 4274, 4278, 4282,
     4286, 4290,  189, 4292, 4294,  155, 4297, 4301, 4305, 4309,
     4311, 4313,  154, 4316
    } ;

static yyconst flex_int16_t yy_def[685] =
    {   0,
      664,    1,  665,  665,  666,  666,  667,  667,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      669,  669,  670,  670,  668,  668,  671,  671,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  672,  672,
      668,  668,  668,  668,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,   75,  673,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  674,  664,  675,  664,  676,  664,

      664,  664,  664,  664,  664,  664,  664,  677,  664,  664,
      664,  678,  664,  679,  664,  664,  664,  680,  664,  664,
      664,  664,  664,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  664,  664,  664,  664,  664,
      664,  681,  674,  664,  682,  675,  683,  676,  664,  664,

      664,  664,  664,  664,  664,  684,  677,  678,  664,  679,
      664,  680,  664,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  664,  664,  664,  664,  664,  664,  664,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  664,  664,  664,  664,  664,  664,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  664,  664,  664,  664,  664,  664,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      664,  664,  664,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  664,
      664,  664,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  664,  664,  664,  673,  673,  673,  673,  673,  673,
      664,  673,  673,  673,  673,  664,  673,  673,  673,  664,
      673,  673,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,    0,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664
    } ;

static yyconst flex_int16_t yy_nxt[4399] =
    {   0,
       46,   47,   48,   46,   49,   50,   46,   51,   52,   52,
       52,   53,   54,   55,   55,   55,   56,   57,   58,   59,
       46,   60,   61,   62,   63,   64,   65,   66,   66,   67,
       66,   66,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   66,   66,   46,   46,   80,   46,
       60,   61,   62,   63,   64,   65,   66,   66,   67,   66,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   66,   66,   81,   46,   52,   83,   83,   86,
       86,   89,   84,   84,   87,   87,   89,   92,   92,  120,
      121,  380,  101,  102,  103,  101,  102,  103,  117,  381,

       93,   93,  104,  118,  105,  104,  115,  105,  116,  116,
      116,  116,  189,  116,  116,  116,   92,   92,  124,  124,
      124,  101,  102,  103,  101,  102,  103,  190,   93,   93,
      104,  380,  105,  104,  192,  105,  192,  192,  192,  381,
      195,  189,  195,  195,  195,  197,  197,  197,  204,  204,
      204,  197,  197,  197,  124,   90,  190,  197,  198,  191,
       90,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   94,   91,
       91,   91,  124,  124,  124,  124,  124,  124,  191,  199,
      194,  200,  125,  201,  663,  202,  203,  167,  154,  116,

      291,  116,  116,  116,  155,  292,  205,   91,   91,   91,
      206,  206,  206,  662,  661,  660,  659,  199,  124,  194,
      200,  124,  201,  202,  203,  658,  167,  154,  291,  124,
      124,  124,  155,  657,  292,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   94,   91,   91,   91,  124,
      124,  124,  124,  124,  124,  124,  295,  182,  293,  656,
      180,  156,  294,  655,  183,  297,  184,  296,  181,  298,
      654,  157,  299,  125,   91,   91,   91,  116,  653,  116,
      116,  116,  652,  651,  295,  124,  182,  293,  124,  180,

      156,  294,  183,  297,  184,  650,  296,  181,  298,  157,
      299,  125,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   96,   91,   91,   91,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  371,  649,  124,  124,  124,
      205,  372,  158,  215,  206,  206,  206,  373,  159,  374,
      375,   91,   91,   91,  192,  648,  192,  192,  192,  647,
      646,  645,  124,  644,  371,  124,  643,  640,  124,  372,
      636,  158,  215,  124,  631,  373,  159,  374,  375,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   96,
       91,   91,   91,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  376,  449,
      217,  222,  624,  223,  623,  185,  377,  622,   91,   91,
       91,  195,  610,  195,  195,  195,  591,  554,  505,  124,
      443,  301,  124,  370,  213,  124,  376,  449,  124,  217,
      222,  124,  223,  185,  211,  377,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  378,

      209,  224,  124,  124,  124,  379,  444,  235,  445,  205,
      446,  300,  447,  301,  216,   91,   91,   91,  204,  204,
      204,  290,  213,  211,  209,  111,  124,  110,  378,  124,
      224,  188,  124,  187,  379,  444,  235,  445,  124,  446,
      186,  447,  216,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  248,  123,  448,  122,  506,  251,  119,  218,
      507,  225,   91,   91,   91,  114,  113,  112,  111,  110,

      664,  109,  109,  124,  107,  107,  124,  106,  106,  124,
      100,  248,  124,  448,  506,  124,  251,  218,  507,  225,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  508,  100,  272,   98,  238,   98,  226,   91,
       91,   91,  664,  664,  664,  664,  664,  664,  664,  664,
      124,  664,  664,  124,  664,  664,  124,  664,  664,  124,
      664,  508,  124,  272,  238,  124,  226,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,  124,  124,  124,  664,  124,  124,  124,  557,  124,
      124,  124,  664,  130,  124,  124,  124,  124,  124,  124,
      509,  664,  664,  131,  664,  664,   91,   91,   91,  124,
      124,  124,  132,  143,  214,  144,  557,  124,  124,  124,
      124,  124,  130,  219,  145,  124,  664,  510,  236,  509,
      124,  131,  243,  124,   91,   91,   91,  124,  124,  124,
      132,  143,  214,  144,  237,  124,  126,  124,  124,  124,
      664,  219,  145,  555,  124,  164,  510,  236,  127,  556,

      243,  128,  558,  129,  664,  124,  124,  124,  124,  124,
      124,  165,  237,  124,  166,  126,  559,  124,  124,  124,
      592,  258,  555,  124,  164,  664,  127,  259,  556,  128,
      558,  129,  124,  124,  124,  231,  593,  232,  233,  165,
      133,  124,  166,  134,  124,  559,  611,  135,  592,  612,
      258,  136,  664,  124,  137,  259,  124,  124,  124,  138,
      124,  124,  124,  231,  593,  232,  233,  664,  124,  133,
      664,  664,  134,  664,  664,  611,  135,  178,  612,  136,
      664,  179,  137,  664,  220,  221,  664,  138,  124,  124,
      124,  664,  124,  664,  664,  664,  124,  664,  664,  664,

      139,  124,  124,  124,  140,  178,  124,  124,  124,  179,
      141,  664,  220,  221,  227,  124,  124,  124,  664,  142,
      664,  124,  124,  124,  124,  664,  228,  664,  664,  139,
      664,  229,  664,  140,  230,  664,  664,  124,  141,  664,
      234,  664,  124,  227,  664,  664,  250,  142,  124,  124,
      124,  124,  664,  664,  228,  664,  146,  124,  664,  229,
      664,  664,  230,  664,  147,  124,  124,  124,  234,  664,
      148,  124,  124,  124,  250,  149,  124,  124,  124,  664,
      124,  124,  124,  664,  124,  146,  242,  124,  124,  124,
      239,  664,  240,  147,  664,  664,  664,  664,  148,  252,

      241,  124,  664,  149,  124,  124,  124,  124,  249,  124,
      124,  124,  124,  664,  242,  664,  124,  150,  239,  664,
      240,  255,  664,  124,  151,  152,  664,  252,  241,  153,
      124,  124,  124,  664,  664,  664,  249,  124,  124,  124,
      124,  253,  124,  124,  124,  124,  150,  256,  664,  664,
      255,  260,  151,  152,  664,  664,  254,  153,  124,  124,
      124,  664,  257,  124,  124,  124,  124,  124,  124,  124,
      253,  160,  664,  124,  664,  664,  256,  664,  124,  161,
      260,  664,  162,  664,  254,  664,  163,  664,  664,  664,
      257,  664,  664,  267,  124,  664,  124,  124,  124,  124,

      160,  664,  664,  124,  124,  124,  124,  161,  664,  266,
      162,  664,  664,  664,  163,  124,  124,  124,  124,  124,
      124,  267,  664,  168,  664,  271,  304,  169,  664,  664,
      170,  171,  124,  664,  664,  172,  664,  664,  266,  664,
      124,  173,  664,  124,  124,  124,  124,  124,  124,  664,
      664,  124,  168,  271,  124,  304,  169,  664,  283,  170,
      171,  664,  268,  172,  664,  269,  664,  270,  664,  173,
      124,  124,  124,  664,  664,  124,  124,  124,  664,  124,
      664,  664,  124,  664,  664,  174,  273,  283,  664,  664,
      268,  664,  175,  269,  176,  270,  664,  274,  664,  275,

      664,  177,  664,  664,  664,  664,  124,  664,  124,  124,
      124,  124,  664,  664,  174,  273,  124,  124,  124,  664,
      175,  664,  176,  664,  664,  274,  664,  275,  276,  177,
      124,  124,  124,  664,  664,  278,  124,  124,  124,  279,
      277,  244,  664,  664,  124,  245,  246,  124,  124,  124,
      664,  664,  124,  124,  124,  124,  247,  276,  664,  664,
      284,  664,  664,  278,  664,  664,  124,  279,  277,  664,
      244,  664,  124,  664,  245,  246,  280,  664,  664,  664,
      124,  124,  124,  124,  247,  124,  124,  124,  284,  124,
      124,  124,  124,  261,  664,  262,  281,  664,  664,  263,

      664,  264,  664,  664,  280,  664,  282,  664,  265,  664,
      664,  124,  124,  124,  285,  664,  124,  124,  124,  124,
      664,  124,  261,  664,  262,  281,  124,  286,  263,  664,
      264,  664,  664,  664,  282,  664,  265,  664,  124,  124,
      124,  287,  285,  124,  124,  124,  664,  124,  664,  124,
      124,  124,  664,  124,  288,  664,  286,  124,  124,  124,
      664,  124,  124,  124,  124,  124,  124,  289,  664,  287,
      664,  302,  664,  305,  124,  303,  307,  664,  664,  124,
      306,  664,  664,  288,  664,  124,  664,  124,  124,  124,
      124,  124,  124,  124,  664,  289,  664,  124,  308,  302,

      124,  664,  305,  303,  664,  307,  664,  664,  306,  124,
      124,  124,  124,  124,  124,  312,  124,  124,  124,  664,
      664,  309,  310,  124,  664,  664,  124,  308,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      311,  664,  315,  312,  664,  124,  664,  664,  124,  664,
      309,  310,  124,  313,  664,  314,  124,  124,  124,  664,
      124,  124,  124,  316,  124,  664,  664,  124,  311,  318,
      124,  315,  664,  124,  124,  124,  124,  664,  664,  317,
      664,  313,  664,  314,  664,  124,  124,  124,  124,  124,
      124,  316,  124,  320,  664,  319,  124,  664,  318,  664,

      321,  124,  124,  124,  124,  124,  124,  317,  664,  664,
      124,  664,  664,  322,  664,  664,  323,  664,  124,  124,
      124,  124,  320,  319,  124,  664,  124,  124,  124,  321,
      124,  124,  124,  124,  124,  124,  664,  124,  325,  664,
      124,  326,  322,  324,  664,  323,  124,  124,  124,  664,
      664,  124,  124,  124,  124,  664,  327,  124,  124,  124,
      664,  664,  124,  329,  664,  664,  124,  325,  664,  124,
      326,  324,  124,  124,  124,  664,  328,  664,  664,  124,
      124,  124,  124,  664,  330,  327,  664,  124,  124,  124,
      332,  664,  329,  124,  124,  124,  124,  664,  664,  664,

      333,  664,  334,  664,  328,  331,  664,  664,  124,  124,
      124,  124,  664,  330,  664,  124,  664,  124,  124,  124,
      124,  124,  124,  335,  124,  124,  124,  124,  664,  333,
      124,  334,  664,  331,  664,  124,  124,  124,  124,  124,
      124,  664,  336,  664,  664,  124,  664,  337,  124,  124,
      124,  664,  335,  124,  664,  664,  124,  124,  124,  124,
      664,  124,  664,  124,  124,  124,  664,  664,  664,  664,
      336,  124,  338,  340,  124,  339,  337,  124,  124,  124,
      124,  124,  124,  664,  124,  124,  124,  124,  124,  124,
      124,  347,  664,  124,  664,  124,  124,  124,  664,  124,

      338,  664,  340,  339,  346,  341,  124,  124,  124,  664,
      348,  349,  664,  124,  664,  664,  124,  124,  124,  124,
      347,  124,  664,  664,  124,  664,  664,  350,  664,  351,
      664,  124,  346,  341,  124,  124,  124,  664,  348,  664,
      349,  664,  124,  664,  342,  124,  124,  124,  343,  664,
      124,  124,  124,  124,  664,  350,  664,  344,  351,  664,
      345,  664,  352,  124,  124,  124,  124,  124,  124,  664,
      124,  664,  664,  342,  124,  124,  124,  343,  124,  124,
      124,  124,  664,  664,  664,  344,  124,  664,  345,  664,
      353,  352,  354,  124,  124,  124,  124,  124,  124,  124,

      664,  664,  124,  124,  124,  124,  356,  124,  124,  124,
      124,  664,  355,  664,  124,  124,  124,  124,  353,  664,
      664,  354,  664,  358,  124,  124,  124,  357,  664,  124,
      664,  664,  124,  664,  664,  356,  359,  664,  664,  124,
      355,  664,  664,  124,  124,  124,  124,  124,  124,  124,
      664,  124,  358,  664,  664,  357,  360,  664,  664,  361,
      124,  124,  124,  124,  359,  124,  124,  124,  124,  124,
      124,  664,  664,  362,  124,  124,  124,  664,  664,  664,
      124,  664,  664,  124,  364,  360,  664,  664,  361,  664,
      664,  363,  124,  124,  124,  664,  664,  124,  664,  365,

      664,  124,  362,  664,  124,  124,  124,  124,  664,  664,
      124,  664,  664,  364,  124,  124,  124,  664,  664,  363,
      124,  124,  124,  664,  124,  124,  124,  365,  124,  664,
      664,  366,  664,  367,  664,  368,  124,  124,  124,  664,
      664,  124,  664,  124,  124,  124,  369,  124,  124,  124,
      124,  124,  124,  124,  664,  664,  124,  664,  664,  366,
      124,  367,  382,  664,  368,  124,  124,  124,  124,  124,
      124,  383,  124,  664,  369,  124,  124,  124,  664,  124,
      386,  664,  384,  124,  664,  664,  385,  124,  664,  664,
      382,  124,  124,  124,  124,  124,  124,  664,  664,  383,

      664,  124,  664,  664,  124,  664,  664,  387,  664,  386,
      384,  124,  664,  664,  385,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  664,  664,
      124,  124,  124,  124,  388,  664,  387,  124,  124,  124,
      124,  124,  124,  391,  664,  664,  389,  124,  124,  124,
      390,  124,  664,  664,  124,  664,  394,  124,  664,  664,
      124,  664,  388,  664,  392,  664,  664,  124,  124,  124,
      124,  393,  391,  124,  389,  664,  124,  664,  390,  664,
      124,  124,  124,  124,  664,  394,  664,  395,  124,  124,
      124,  664,  392,  124,  124,  124,  124,  124,  124,  393,

      664,  124,  124,  124,  124,  664,  396,  664,  397,  124,
      124,  124,  124,  124,  124,  395,  124,  664,  664,  398,
      664,  664,  399,  664,  124,  664,  124,  124,  124,  124,
      664,  401,  124,  664,  396,  664,  397,  124,  400,  124,
      124,  124,  124,  124,  124,  124,  664,  398,  124,  664,
      399,  124,  124,  124,  403,  124,  124,  124,  664,  401,
      664,  664,  124,  664,  664,  402,  664,  400,  124,  124,
      124,  664,  124,  407,  124,  124,  664,  664,  124,  405,
      664,  404,  664,  403,  406,  664,  664,  124,  124,  124,
      124,  124,  664,  402,  124,  124,  124,  664,  124,  124,

      124,  664,  408,  664,  124,  664,  664,  405,  124,  404,
      664,  664,  409,  406,  411,  124,  124,  124,  410,  664,
      124,  124,  124,  413,  124,  664,  664,  412,  664,  664,
      124,  408,  664,  414,  124,  124,  124,  124,  664,  664,
      409,  664,  664,  411,  664,  664,  410,  664,  124,  124,
      124,  124,  413,  664,  415,  412,  124,  664,  664,  416,
      421,  664,  414,  664,  124,  124,  124,  124,  124,  124,
      664,  124,  417,  664,  664,  419,  418,  124,  124,  124,
      664,  664,  415,  664,  124,  420,  664,  416,  664,  421,
      664,  124,  124,  124,  124,  124,  124,  124,  124,  124,

      124,  417,  664,  124,  419,  418,  423,  664,  664,  424,
      124,  124,  124,  124,  420,  422,  664,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  425,  124,  664,  664,
      124,  664,  664,  124,  664,  423,  664,  664,  424,  426,
      664,  664,  664,  422,  427,  664,  124,  664,  428,  124,
      124,  124,  664,  124,  664,  425,  124,  664,  664,  124,
      124,  124,  124,  124,  124,  124,  664,  426,  430,  124,
      124,  124,  427,  431,  664,  429,  428,  664,  664,  124,
      124,  124,  124,  124,  124,  124,  664,  664,  124,  124,
      124,  664,  124,  124,  124,  432,  124,  430,  433,  124,

      664,  434,  431,  429,  436,  124,  124,  124,  124,  437,
      124,  124,  124,  664,  435,  124,  664,  664,  124,  124,
      124,  124,  664,  432,  124,  664,  433,  438,  124,  434,
      124,  124,  124,  436,  124,  124,  124,  437,  124,  124,
      124,  664,  124,  435,  664,  664,  124,  664,  124,  124,
      124,  124,  124,  124,  664,  124,  438,  664,  124,  124,
      124,  124,  124,  124,  664,  664,  124,  439,  664,  664,
      124,  664,  664,  441,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  440,  664,  124,  664,  664,
      442,  124,  124,  124,  124,  439,  664,  124,  664,  451,

      664,  664,  441,  124,  124,  124,  664,  664,  450,  664,
      664,  124,  664,  440,  124,  664,  664,  124,  664,  442,
      124,  124,  124,  124,  124,  124,  664,  124,  451,  664,
      664,  452,  124,  124,  124,  664,  450,  664,  664,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  664,
      124,  124,  124,  453,  664,  664,  124,  664,  664,  124,
      452,  124,  124,  124,  124,  124,  124,  664,  124,  664,
      454,  455,  664,  124,  124,  124,  124,  664,  664,  124,
      456,  453,  124,  664,  458,  664,  124,  664,  664,  664,
      664,  457,  664,  664,  459,  664,  664,  124,  454,  455,

      124,  664,  124,  124,  124,  124,  124,  124,  456,  124,
      124,  124,  124,  458,  460,  124,  124,  124,  664,  457,
      664,  664,  459,  124,  124,  124,  664,  461,  664,  664,
      664,  462,  664,  664,  464,  664,  463,  664,  124,  664,
      664,  124,  664,  460,  664,  664,  124,  124,  124,  124,
      664,  124,  124,  124,  124,  461,  124,  124,  124,  124,
      462,  664,  664,  464,  463,  664,  664,  664,  465,  664,
      664,  466,  467,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  664,  124,  124,  124,  124,  664,  124,  124,
      124,  124,  124,  468,  664,  469,  664,  465,  664,  466,

      664,  467,  124,  124,  124,  124,  124,  124,  664,  124,
      470,  664,  124,  664,  664,  124,  664,  471,  664,  664,
      124,  468,  664,  664,  469,  124,  664,  124,  124,  124,
      124,  124,  124,  664,  124,  124,  124,  664,  124,  470,
      472,  124,  124,  124,  124,  664,  471,  664,  124,  124,
      124,  124,  124,  124,  664,  474,  664,  664,  664,  477,
      664,  473,  476,  124,  475,  664,  124,  664,  664,  472,
      124,  124,  124,  124,  124,  124,  124,  664,  124,  664,
      124,  124,  124,  474,  124,  664,  664,  124,  477,  473,
      479,  476,  475,  478,  480,  124,  124,  124,  124,  124,

      124,  124,  124,  124,  664,  664,  481,  124,  664,  664,
      124,  124,  124,  124,  664,  664,  124,  482,  664,  479,
      664,  478,  484,  480,  124,  124,  124,  483,  124,  124,
      124,  124,  485,  664,  124,  481,  664,  124,  124,  124,
      124,  664,  124,  124,  124,  482,  664,  124,  487,  664,
      664,  484,  486,  664,  664,  483,  124,  124,  124,  664,
      124,  485,  664,  490,  124,  664,  488,  664,  124,  124,
      124,  124,  124,  124,  124,  664,  664,  487,  124,  491,
      486,  489,  124,  124,  124,  124,  124,  124,  664,  664,
      664,  490,  124,  664,  664,  488,  664,  492,  664,  124,

      124,  124,  664,  664,  124,  664,  493,  124,  491,  489,
      664,  494,  124,  124,  124,  496,  664,  664,  124,  664,
      495,  124,  124,  124,  124,  492,  124,  124,  124,  124,
      124,  124,  664,  664,  493,  124,  664,  664,  497,  494,
      664,  499,  664,  664,  496,  498,  664,  664,  124,  495,
      124,  124,  124,  124,  124,  124,  664,  664,  124,  664,
      664,  500,  124,  664,  502,  124,  664,  497,  664,  499,
      124,  124,  124,  664,  498,  124,  124,  124,  124,  124,
      124,  664,  664,  503,  501,  664,  124,  664,  664,  124,
      500,  664,  664,  502,  124,  124,  124,  124,  124,  124,

      124,  124,  124,  664,  664,  664,  124,  124,  124,  124,
      512,  124,  503,  501,  124,  664,  504,  124,  124,  124,
      664,  664,  664,  511,  664,  514,  664,  664,  513,  664,
      124,  664,  664,  124,  664,  664,  124,  664,  664,  512,
      124,  124,  124,  124,  504,  124,  124,  124,  664,  664,
      664,  511,  664,  124,  514,  516,  513,  124,  124,  124,
      124,  124,  124,  664,  124,  124,  124,  515,  664,  664,
      518,  124,  124,  124,  664,  664,  124,  124,  124,  124,
      664,  124,  664,  517,  516,  124,  124,  124,  124,  124,
      124,  664,  664,  124,  664,  515,  124,  519,  520,  518,

      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  517,  664,  124,  664,  664,  521,  124,  124,  124,
      664,  124,  664,  664,  124,  519,  664,  520,  124,  124,
      124,  664,  664,  664,  124,  124,  124,  124,  664,  523,
      124,  664,  664,  664,  124,  521,  525,  664,  664,  522,
      524,  664,  664,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  664,  124,  664,  664,  523,  664,  664,
      124,  124,  124,  124,  664,  525,  527,  522,  524,  664,
      526,  124,  124,  124,  528,  124,  124,  124,  664,  529,
      124,  664,  664,  124,  664,  664,  124,  664,  124,  124,

      124,  124,  124,  124,  527,  664,  664,  124,  526,  664,
      664,  530,  528,  532,  664,  664,  664,  124,  529,  664,
      664,  124,  531,  664,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  664,  124,  534,  664,  124,  664,  530,
      664,  535,  532,  664,  124,  124,  124,  124,  124,  124,
      531,  533,  124,  124,  124,  664,  536,  124,  124,  124,
      124,  664,  664,  124,  534,  664,  124,  664,  664,  537,
      535,  664,  124,  124,  124,  124,  124,  124,  664,  533,
      124,  664,  664,  124,  664,  536,  664,  664,  124,  124,
      124,  124,  664,  124,  664,  539,  664,  664,  537,  538,

      124,  124,  124,  124,  124,  124,  664,  664,  124,  664,
      664,  124,  124,  124,  124,  540,  124,  124,  124,  124,
      124,  124,  664,  539,  664,  124,  541,  538,  124,  124,
      124,  542,  124,  124,  124,  664,  124,  664,  543,  124,
      544,  664,  664,  540,  664,  124,  124,  124,  124,  124,
      124,  124,  124,  664,  541,  124,  124,  124,  124,  664,
      542,  124,  124,  124,  124,  664,  543,  545,  124,  544,
      547,  664,  124,  124,  124,  546,  664,  124,  124,  124,
      664,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  548,  664,  545,  549,  124,  547,  664,

      124,  124,  124,  546,  664,  124,  124,  124,  124,  664,
      124,  124,  124,  124,  124,  124,  124,  551,  124,  552,
      664,  548,  550,  664,  549,  124,  553,  124,  124,  124,
      124,  124,  124,  562,  664,  664,  124,  664,  664,  560,
      664,  124,  124,  124,  124,  551,  124,  552,  664,  664,
      124,  664,  563,  664,  553,  664,  561,  124,  124,  124,
      664,  562,  664,  124,  664,  664,  124,  664,  560,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  664,
      664,  563,  664,  664,  561,  124,  124,  124,  564,  124,
      124,  124,  664,  124,  664,  124,  124,  124,  565,  664,

      664,  566,  124,  124,  124,  124,  567,  664,  124,  664,
      568,  124,  124,  124,  124,  664,  564,  664,  124,  124,
      124,  124,  124,  124,  124,  124,  565,  664,  664,  664,
      566,  124,  664,  569,  572,  567,  664,  664,  124,  568,
      124,  124,  124,  570,  124,  124,  124,  664,  124,  124,
      124,  124,  571,  664,  124,  124,  124,  124,  124,  573,
      664,  569,  664,  572,  124,  124,  124,  124,  124,  124,
      664,  570,  124,  124,  124,  574,  124,  124,  124,  124,
      124,  571,  664,  576,  664,  124,  664,  664,  573,  664,
      664,  124,  664,  124,  124,  124,  575,  124,  124,  124,

      124,  664,  664,  124,  574,  577,  664,  664,  124,  124,
      124,  124,  576,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  664,  575,  664,  124,  124,  124,  124,
      664,  664,  664,  124,  577,  124,  124,  124,  578,  124,
      124,  124,  124,  124,  124,  124,  664,  580,  664,  664,
      124,  579,  664,  124,  581,  664,  124,  582,  124,  124,
      124,  664,  124,  583,  664,  664,  578,  664,  664,  584,
      664,  124,  124,  124,  124,  124,  580,  664,  124,  579,
      124,  124,  124,  581,  664,  582,  124,  124,  124,  664,
      664,  583,  664,  664,  124,  124,  124,  124,  584,  585,

      124,  124,  124,  664,  664,  124,  124,  124,  124,  124,
      124,  124,  586,  589,  664,  664,  124,  664,  664,  588,
      664,  587,  124,  664,  124,  124,  124,  585,  124,  124,
      124,  124,  124,  124,  124,  664,  124,  124,  124,  124,
      586,  124,  589,  590,  664,  124,  664,  588,  664,  587,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  664,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  664,
      664,  590,  664,  124,  664,  664,  594,  664,  595,  124,
      124,  124,  124,  124,  124,  596,  124,  664,  664,  124,
      664,  664,  124,  124,  124,  124,  664,  124,  124,  124,

      124,  124,  664,  664,  594,  597,  595,  664,  664,  599,
      124,  124,  124,  596,  664,  124,  664,  664,  124,  598,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      664,  664,  601,  597,  124,  124,  124,  124,  599,  124,
      124,  124,  600,  124,  124,  124,  124,  598,  664,  124,
      124,  124,  602,  664,  664,  603,  124,  664,  664,  124,
      664,  601,  124,  124,  124,  124,  124,  124,  124,  664,
      600,  124,  664,  664,  604,  124,  664,  605,  664,  124,
      602,  124,  124,  124,  603,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  664,  124,

      664,  664,  124,  604,  664,  664,  605,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  606,  124,  124,  124,
      124,  664,  124,  664,  664,  124,  607,  664,  124,  664,
      664,  124,  124,  124,  124,  664,  664,  608,  124,  124,
      124,  664,  614,  124,  606,  664,  124,  664,  664,  124,
      664,  124,  124,  124,  124,  607,  124,  124,  124,  664,
      613,  664,  664,  609,  615,  608,  664,  664,  124,  664,
      614,  664,  616,  664,  124,  124,  124,  124,  124,  124,
      124,  664,  664,  617,  124,  124,  124,  124,  613,  664,
      664,  609,  124,  615,  124,  124,  124,  124,  124,  124,

      618,  616,  619,  124,  124,  124,  124,  124,  124,  664,
      664,  124,  617,  664,  124,  124,  124,  124,  664,  664,
      124,  664,  124,  124,  124,  664,  664,  664,  618,  664,
      124,  619,  620,  124,  124,  124,  124,  664,  664,  124,
      664,  664,  124,  124,  124,  124,  124,  124,  124,  664,
      664,  124,  664,  124,  124,  124,  664,  664,  124,  664,
      621,  620,  124,  124,  124,  124,  124,  124,  664,  664,
      124,  664,  664,  626,  124,  124,  124,  625,  664,  124,
      664,  664,  124,  124,  124,  124,  664,  664,  621,  124,
      124,  124,  124,  124,  124,  124,  627,  664,  124,  664,

      664,  124,  626,  664,  664,  625,  124,  124,  124,  628,
      124,  124,  124,  124,  124,  124,  124,  664,  664,  124,
      124,  124,  124,  630,  627,  664,  124,  664,  664,  124,
      632,  664,  629,  124,  124,  124,  664,  628,  664,  124,
      124,  124,  124,  124,  124,  124,  664,  124,  664,  664,
      124,  664,  630,  664,  633,  634,  124,  664,  664,  632,
      629,  124,  124,  124,  124,  124,  124,  664,  664,  124,
      664,  124,  124,  124,  664,  124,  637,  635,  664,  124,
      664,  664,  633,  664,  634,  664,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  664,  664,  124,  664,  664,

      124,  664,  124,  124,  124,  637,  635,  124,  638,  664,
      664,  639,  124,  124,  124,  664,  124,  124,  124,  124,
      124,  124,  124,  641,  664,  124,  664,  664,  124,  664,
      664,  664,  664,  642,  664,  664,  638,  664,  124,  639,
      664,  664,  664,  664,  664,  664,  664,  664,  124,  664,
      664,  641,  124,  664,  664,  124,  664,  664,  664,  664,
      664,  642,   82,   82,   82,   82,   85,   85,   85,   85,
       88,   88,   88,   88,   91,   91,   91,   91,   95,   95,
       95,   95,   97,   97,   97,   97,   99,   99,   99,   99,
      108,  108,  108,  108,  193,  193,  196,  196,  207,  664,

      207,  208,  208,  208,  208,  210,  210,  210,  210,  212,
      212,  212,  212,  192,  192,  195,  195,  206,  664,  206,
       45,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664

    } ;

static yyconst flex_int16_t yy_chk[4399] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        6,    7,    3,    4,    5,    6,    8,   19,   20,   57,
       57,  300,   31,   31,   31,   32,   32,   32,   54,  300,

       19,   20,   31,   54,   31,   32,   53,   32,   53,   53,
       53,   55,   92,   55,   55,   55,   19,   20,   66,   66,
       66,   31,   31,   31,   32,   32,   32,   93,   19,   20,
       31,  380,   31,   32,   95,   32,   95,   95,   95,  380,
       97,   92,   97,   97,   97,   99,   99,   99,  107,  107,
      107,  198,  198,  198,   66,    7,   93,  683,  676,   94,
        8,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   68,   68,   68,   73,   73,   73,   94,  101,
       96,  102,  673,  103,  662,  104,  105,   73,   68,  115,

      189,  115,  115,  115,   68,  190,  108,   21,   21,   21,
      108,  108,  108,  661,  660,  659,  658,  101,   68,   96,
      102,   73,  103,  104,  105,  657,   73,   68,  189,  124,
      124,  124,   68,  656,  190,   21,   21,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   69,
       69,   69,   77,   77,   77,  124,  199,   78,  191,  655,
       77,   69,  194,  654,   78,  201,   78,  200,   77,  202,
      653,   69,  203,   78,   22,   22,   22,  116,  652,  116,
      116,  116,  651,  650,  199,   69,   78,  191,   77,   77,

       69,  194,   78,  201,   78,  649,  200,   77,  202,   69,
      203,   78,   22,   22,   22,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   70,   70,   70,  125,
      125,  125,  127,  127,  127,  291,  648,  129,  129,  129,
      207,  292,   70,  127,  207,  207,  207,  293,   70,  294,
      295,   23,   23,   23,  193,  647,  193,  193,  193,  646,
      645,  644,   70,  643,  291,  125,  640,  636,  127,  292,
      631,   70,  127,  129,  622,  293,   70,  294,  295,   23,
       23,   23,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   79,   79,   79,  130,  130,  130,  134,
      134,  134,  150,  150,  150,  135,  135,  135,  296,  379,
      130,  134,  612,  135,  611,   79,  297,  610,   24,   24,
       24,  196,  591,  196,  196,  196,  554,  505,  443,   79,
      370,  301,  130,  290,  212,  134,  296,  379,  150,  130,
      134,  135,  135,   79,  210,  297,   24,   24,   24,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
      128,  128,  128,  136,  136,  136,  144,  144,  144,  298,

      208,  136,  153,  153,  153,  299,  372,  144,  373,  206,
      374,  204,  375,  205,  128,   27,   27,   27,  204,  204,
      204,  186,  118,  114,  112,  111,  128,  110,  298,  136,
      136,   87,  144,   84,  299,  372,  144,  373,  153,  374,
       80,  375,  128,   27,   27,   27,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,  131,  131,  131,
      137,  137,  137,  154,  154,  154,  157,  157,  157,  160,
      160,  160,  154,   59,  378,   58,  445,  157,   56,  131,
      446,  137,   28,   28,   28,   51,   50,   49,   48,   47,

       45,   42,   41,  131,   36,   35,  137,   34,   33,  154,
       30,  154,  157,  378,  445,  160,  157,  131,  446,  137,
       28,   28,   28,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,  138,  138,  138,  146,  146,  146,
      161,  161,  161,  162,  162,  162,  172,  172,  172,  175,
      175,  175,  447,   29,  172,   26,  146,   25,  138,   39,
       39,   39,    0,    0,    0,    0,    0,    0,    0,    0,
      138,    0,    0,  146,    0,    0,  161,    0,    0,  162,
        0,  447,  172,  172,  146,  175,  138,   39,   39,   39,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   61,   61,   61,    0,  215,  215,  215,  508,  126,
      126,  126,    0,   61,   64,   64,   64,  132,  132,  132,
      448,    0,    0,   61,    0,    0,   40,   40,   40,  151,
      151,  151,   61,   64,  126,   64,  508,   61,  145,  145,
      145,  215,   61,  132,   64,  126,    0,  449,  145,  448,
       64,   61,  151,  132,   40,   40,   40,   60,   60,   60,
       61,   64,  126,   64,  145,  151,   60,   72,   72,   72,
        0,  132,   64,  506,  145,   72,  449,  145,   60,  507,

      151,   60,  509,   60,    0,  165,  165,  165,  141,  141,
      141,   72,  145,   60,   72,   60,  510,  142,  142,  142,
      555,  165,  506,   72,   72,    0,   60,  165,  507,   60,
      509,   60,   62,   62,   62,  141,  556,  141,  142,   72,
       62,  165,   72,   62,  141,  510,  592,   62,  555,  593,
      165,   62,    0,  142,   62,  165,   76,   76,   76,   62,
      133,  133,  133,  141,  556,  141,  142,    0,   62,   62,
        0,    0,   62,    0,    0,  592,   62,   76,  593,   62,
        0,   76,   62,    0,  133,  133,    0,   62,   63,   63,
       63,    0,   76,    0,    0,    0,  133,    0,    0,    0,

       63,  139,  139,  139,   63,   76,  140,  140,  140,   76,
       63,    0,  133,  133,  139,  143,  143,  143,    0,   63,
        0,  156,  156,  156,   63,    0,  139,    0,    0,   63,
        0,  140,    0,   63,  140,    0,    0,  139,   63,    0,
      143,    0,  140,  139,    0,    0,  156,   63,   65,   65,
       65,  143,    0,    0,  139,    0,   65,  156,    0,  140,
        0,    0,  140,    0,   65,  149,  149,  149,  143,    0,
       65,  147,  147,  147,  156,   65,  148,  148,  148,    0,
      158,  158,  158,    0,   65,   65,  149,  155,  155,  155,
      147,    0,  147,   65,    0,    0,    0,    0,   65,  158,

      148,  149,    0,   65,   67,   67,   67,  147,  155,  163,
      163,  163,  148,    0,  149,    0,  158,   67,  147,    0,
      147,  163,    0,  155,   67,   67,    0,  158,  148,   67,
      159,  159,  159,    0,    0,    0,  155,  164,  164,  164,
       67,  159,  166,  166,  166,  163,   67,  164,    0,    0,
      163,  166,   67,   67,    0,    0,  159,   67,   71,   71,
       71,    0,  164,  230,  230,  230,  159,  169,  169,  169,
      159,   71,    0,  164,    0,    0,  164,    0,  166,   71,
      166,    0,   71,    0,  159,    0,   71,    0,    0,    0,
      164,    0,    0,  169,   71,    0,  168,  168,  168,  230,

       71,    0,    0,  169,  171,  171,  171,   71,    0,  168,
       71,    0,    0,    0,   71,   74,   74,   74,  216,  216,
      216,  169,    0,   74,    0,  171,  216,   74,    0,    0,
       74,   74,  168,    0,    0,   74,    0,    0,  168,    0,
      171,   74,    0,  170,  170,  170,  179,  179,  179,    0,
        0,   74,   74,  171,  216,  216,   74,    0,  179,   74,
       74,    0,  170,   74,    0,  170,    0,  170,    0,   74,
       75,   75,   75,    0,    0,  173,  173,  173,    0,  170,
        0,    0,  179,    0,    0,   75,  173,  179,    0,    0,
      170,    0,   75,  170,   75,  170,    0,  173,    0,  173,

        0,   75,    0,    0,    0,    0,   75,    0,  176,  176,
      176,  173,    0,    0,   75,  173,  174,  174,  174,    0,
       75,    0,   75,    0,    0,  173,    0,  173,  174,   75,
      152,  152,  152,    0,    0,  176,  180,  180,  180,  176,
      174,  152,    0,    0,  176,  152,  152,  235,  235,  235,
        0,    0,  174,  177,  177,  177,  152,  174,    0,    0,
      180,    0,    0,  176,    0,    0,  152,  176,  174,    0,
      152,    0,  180,    0,  152,  152,  177,    0,    0,    0,
      178,  178,  178,  235,  152,  167,  167,  167,  180,  177,
      181,  181,  181,  167,    0,  167,  178,    0,    0,  167,

        0,  167,    0,    0,  177,    0,  178,    0,  167,    0,
        0,  182,  182,  182,  181,    0,  178,  183,  183,  183,
        0,  167,  167,    0,  167,  178,  181,  182,  167,    0,
      167,    0,    0,    0,  178,    0,  167,    0,  184,  184,
      184,  183,  181,  185,  185,  185,    0,  182,    0,  214,
      214,  214,    0,  183,  184,    0,  182,  217,  217,  217,
        0,  218,  218,  218,  219,  219,  219,  185,    0,  183,
        0,  214,    0,  217,  184,  214,  219,    0,    0,  185,
      218,    0,    0,  184,    0,  214,    0,  220,  220,  220,
      224,  224,  224,  217,    0,  185,    0,  218,  220,  214,

      219,    0,  217,  214,    0,  219,    0,    0,  218,  221,
      221,  221,  222,  222,  222,  224,  223,  223,  223,    0,
        0,  221,  222,  220,    0,    0,  224,  220,  225,  225,
      225,  226,  226,  226,  227,  227,  227,  228,  228,  228,
      223,    0,  227,  224,    0,  221,    0,    0,  222,    0,
      221,  222,  223,  225,    0,  226,  229,  229,  229,    0,
      231,  231,  231,  228,  225,    0,    0,  226,  223,  231,
      227,  227,    0,  228,  232,  232,  232,    0,    0,  229,
        0,  225,    0,  226,    0,  233,  233,  233,  234,  234,
      234,  228,  229,  233,    0,  232,  231,    0,  231,    0,

      234,  236,  236,  236,  237,  237,  237,  229,    0,    0,
      232,    0,    0,  236,    0,    0,  237,    0,  238,  238,
      238,  233,  233,  232,  234,    0,  239,  239,  239,  234,
      241,  241,  241,  240,  240,  240,    0,  236,  239,    0,
      237,  240,  236,  238,    0,  237,  242,  242,  242,    0,
        0,  244,  244,  244,  238,    0,  242,  243,  243,  243,
        0,    0,  239,  244,    0,    0,  241,  239,    0,  240,
      240,  238,  245,  245,  245,    0,  243,    0,    0,  246,
      246,  246,  242,    0,  245,  242,    0,  244,  247,  247,
      247,    0,  244,  243,  248,  248,  248,    0,    0,    0,

      247,    0,  248,    0,  243,  246,    0,    0,  245,  249,
      249,  249,    0,  245,    0,  246,    0,  250,  250,  250,
      251,  251,  251,  249,  247,  252,  252,  252,    0,  247,
      248,  248,    0,  246,    0,  253,  253,  253,  254,  254,
      254,    0,  250,    0,    0,  249,    0,  253,  255,  255,
      255,    0,  249,  250,    0,    0,  251,  256,  256,  256,
        0,  252,    0,  257,  257,  257,    0,    0,    0,    0,
      250,  253,  255,  257,  254,  256,  253,  258,  258,  258,
      261,  261,  261,    0,  255,  260,  260,  260,  262,  262,
      262,  261,    0,  256,    0,  263,  263,  263,    0,  257,

      255,    0,  257,  256,  260,  258,  264,  264,  264,    0,
      262,  263,    0,  258,    0,    0,  261,  265,  265,  265,
      261,  260,    0,    0,  262,    0,    0,  264,    0,  265,
        0,  263,  260,  258,  259,  259,  259,    0,  262,    0,
      263,    0,  264,    0,  259,  267,  267,  267,  259,    0,
      266,  266,  266,  265,    0,  264,    0,  259,  265,    0,
      259,    0,  266,  268,  268,  268,  269,  269,  269,    0,
      259,    0,    0,  259,  270,  270,  270,  259,  271,  271,
      271,  267,    0,    0,    0,  259,  266,    0,  259,    0,
      269,  266,  271,  272,  272,  272,  273,  273,  273,  268,

        0,    0,  269,  274,  274,  274,  273,  275,  275,  275,
      270,    0,  272,    0,  271,  276,  276,  276,  269,    0,
        0,  271,    0,  275,  279,  279,  279,  274,    0,  272,
        0,    0,  273,    0,    0,  273,  276,    0,    0,  274,
      272,    0,    0,  275,  277,  277,  277,  278,  278,  278,
        0,  276,  275,    0,    0,  274,  277,    0,    0,  278,
      279,  280,  280,  280,  276,  281,  281,  281,  282,  282,
      282,    0,    0,  280,  283,  283,  283,    0,    0,    0,
      277,    0,    0,  278,  282,  277,    0,    0,  278,    0,
        0,  281,  284,  284,  284,    0,    0,  280,    0,  283,

        0,  281,  280,    0,  282,  285,  285,  285,    0,    0,
      283,    0,    0,  282,  286,  286,  286,    0,    0,  281,
      288,  288,  288,    0,  287,  287,  287,  283,  284,    0,
        0,  285,    0,  286,    0,  287,  289,  289,  289,    0,
        0,  285,    0,  302,  302,  302,  288,  303,  303,  303,
      286,  304,  304,  304,    0,    0,  288,    0,    0,  285,
      287,  286,  302,    0,  287,  305,  305,  305,  306,  306,
      306,  303,  289,    0,  288,  307,  307,  307,    0,  302,
      306,    0,  304,  303,    0,    0,  305,  304,    0,    0,
      302,  308,  308,  308,  309,  309,  309,    0,    0,  303,

        0,  305,    0,    0,  306,    0,    0,  308,    0,  306,
      304,  307,    0,    0,  305,  310,  310,  310,  311,  311,
      311,  312,  312,  312,  313,  313,  313,  308,    0,    0,
      309,  314,  314,  314,  310,    0,  308,  315,  315,  315,
      317,  317,  317,  314,    0,    0,  312,  316,  316,  316,
      313,  310,    0,    0,  311,    0,  317,  312,    0,    0,
      313,    0,  310,    0,  315,    0,    0,  314,  318,  318,
      318,  316,  314,  315,  312,    0,  317,    0,  313,    0,
      319,  319,  319,  316,    0,  317,    0,  318,  320,  320,
      320,    0,  315,  321,  321,  321,  322,  322,  322,  316,

        0,  323,  323,  323,  318,    0,  319,    0,  320,  325,
      325,  325,  326,  326,  326,  318,  319,    0,    0,  322,
        0,    0,  323,    0,  320,    0,  324,  324,  324,  321,
        0,  326,  322,    0,  319,    0,  320,  323,  324,  327,
      327,  327,  328,  328,  328,  325,    0,  322,  326,    0,
      323,  329,  329,  329,  328,  330,  330,  330,    0,  326,
        0,    0,  324,    0,    0,  327,    0,  324,  331,  331,
      331,    0,  332,  332,  332,  327,    0,    0,  328,  330,
        0,  329,    0,  328,  331,    0,    0,  329,  333,  333,
      333,  330,    0,  327,  334,  334,  334,    0,  335,  335,

      335,    0,  333,    0,  331,    0,    0,  330,  332,  329,
        0,    0,  333,  331,  335,  336,  336,  336,  334,    0,
      337,  337,  337,  336,  333,    0,    0,  335,    0,    0,
      334,  333,    0,  337,  335,  338,  338,  338,    0,    0,
      333,    0,    0,  335,    0,    0,  334,    0,  342,  342,
      342,  336,  336,    0,  338,  335,  337,    0,    0,  338,
      342,    0,  337,    0,  339,  339,  339,  340,  340,  340,
        0,  338,  339,    0,    0,  340,  339,  341,  341,  341,
        0,    0,  338,    0,  342,  341,    0,  338,    0,  342,
        0,  343,  343,  343,  344,  344,  344,  345,  345,  345,

      339,  339,    0,  340,  340,  339,  344,    0,    0,  345,
      346,  346,  346,  341,  341,  343,    0,  347,  347,  347,
      348,  348,  348,  349,  349,  349,  346,  343,    0,    0,
      344,    0,    0,  345,    0,  344,    0,    0,  345,  347,
        0,    0,    0,  343,  348,    0,  346,    0,  349,  350,
      350,  350,    0,  347,    0,  346,  348,    0,    0,  349,
      351,  351,  351,  352,  352,  352,    0,  347,  351,  353,
      353,  353,  348,  352,    0,  350,  349,    0,    0,  354,
      354,  354,  355,  355,  355,  350,    0,    0,  358,  358,
      358,    0,  357,  357,  357,  353,  351,  351,  354,  352,

        0,  355,  352,  350,  357,  353,  356,  356,  356,  358,
      359,  359,  359,    0,  356,  354,    0,    0,  355,  360,
      360,  360,    0,  353,  358,    0,  354,  360,  357,  355,
      361,  361,  361,  357,  362,  362,  362,  358,  363,  363,
      363,    0,  356,  356,    0,    0,  359,    0,  364,  364,
      364,  365,  365,  365,    0,  360,  360,    0,  366,  366,
      366,  367,  367,  367,    0,    0,  361,  364,    0,    0,
      362,    0,    0,  367,  363,  368,  368,  368,  369,  369,
      369,  382,  382,  382,  364,  366,    0,  365,    0,    0,
      369,  383,  383,  383,  366,  364,    0,  367,    0,  383,

        0,    0,  367,  384,  384,  384,    0,    0,  382,    0,
        0,  368,    0,  366,  369,    0,    0,  382,    0,  369,
      385,  385,  385,  386,  386,  386,    0,  383,  383,    0,
        0,  386,  387,  387,  387,    0,  382,    0,    0,  384,
      388,  388,  388,  389,  389,  389,  390,  390,  390,    0,
      391,  391,  391,  387,    0,    0,  385,    0,    0,  386,
      386,  392,  392,  392,  393,  393,  393,    0,  387,    0,
      390,  391,    0,  394,  394,  394,  388,    0,    0,  389,
      392,  387,  390,    0,  394,    0,  391,    0,    0,    0,
        0,  393,    0,    0,  394,    0,    0,  392,  390,  391,

      393,    0,  395,  395,  395,  396,  396,  396,  392,  394,
      398,  398,  398,  394,  395,  397,  397,  397,    0,  393,
        0,    0,  394,  399,  399,  399,    0,  396,    0,    0,
        0,  397,    0,    0,  399,    0,  398,    0,  395,    0,
        0,  396,    0,  395,    0,    0,  398,  400,  400,  400,
        0,  397,  401,  401,  401,  396,  402,  402,  402,  399,
      397,    0,    0,  399,  398,    0,    0,    0,  401,    0,
        0,  401,  402,  403,  403,  403,  404,  404,  404,  405,
      405,  405,    0,  400,  407,  407,  407,    0,  401,  439,
      439,  439,  402,  403,    0,  405,    0,  401,    0,  401,

        0,  402,  406,  406,  406,  408,  408,  408,    0,  403,
      406,    0,  404,    0,    0,  405,    0,  408,    0,    0,
      407,  403,    0,    0,  405,  439,    0,  409,  409,  409,
      410,  410,  410,    0,  411,  411,  411,    0,  406,  406,
      409,  408,  412,  412,  412,    0,  408,    0,  413,  413,
      413,  414,  414,  414,    0,  411,    0,    0,    0,  414,
        0,  410,  413,  409,  412,    0,  410,    0,    0,  409,
      411,  415,  415,  415,  416,  416,  416,    0,  412,    0,
      417,  417,  417,  411,  413,    0,    0,  414,  414,  410,
      416,  413,  412,  415,  417,  418,  418,  418,  419,  419,

      419,  420,  420,  420,    0,    0,  418,  415,    0,    0,
      416,  421,  421,  421,    0,    0,  417,  419,    0,  416,
        0,  415,  421,  417,  422,  422,  422,  420,  423,  423,
      423,  418,  422,    0,  419,  418,    0,  420,  424,  424,
      424,    0,  426,  426,  426,  419,    0,  421,  424,    0,
        0,  421,  423,    0,    0,  420,  425,  425,  425,    0,
      422,  422,    0,  426,  423,    0,  425,    0,  427,  427,
      427,  428,  428,  428,  424,    0,    0,  424,  426,  427,
      423,  425,  429,  429,  429,  430,  430,  430,    0,    0,
        0,  426,  425,    0,    0,  425,    0,  428,    0,  432,

      432,  432,    0,    0,  427,    0,  429,  428,  427,  425,
        0,  430,  431,  431,  431,  432,    0,    0,  429,    0,
      431,  430,  435,  435,  435,  428,  433,  433,  433,  434,
      434,  434,    0,    0,  429,  432,    0,    0,  433,  430,
        0,  435,    0,    0,  432,  434,    0,    0,  431,  431,
      436,  436,  436,  438,  438,  438,    0,    0,  435,    0,
        0,  436,  433,    0,  438,  434,    0,  433,    0,  435,
      437,  437,  437,    0,  434,  440,  440,  440,  441,  441,
      441,    0,    0,  440,  437,    0,  436,    0,    0,  438,
      436,    0,    0,  438,  442,  442,  442,  450,  450,  450,

      451,  451,  451,    0,    0,    0,  437,  452,  452,  452,
      451,  440,  440,  437,  441,    0,  442,  453,  453,  453,
        0,    0,    0,  450,    0,  453,    0,    0,  452,    0,
      442,    0,    0,  450,    0,    0,  451,    0,    0,  451,
      454,  454,  454,  452,  442,  455,  455,  455,    0,    0,
        0,  450,    0,  453,  453,  455,  452,  456,  456,  456,
      457,  457,  457,    0,  458,  458,  458,  454,    0,    0,
      457,  459,  459,  459,    0,    0,  454,  460,  460,  460,
        0,  455,    0,  456,  455,  461,  461,  461,  462,  462,
      462,    0,    0,  456,    0,  454,  457,  459,  462,  457,

      458,  463,  463,  463,  464,  464,  464,  459,  466,  466,
      466,  456,    0,  460,    0,    0,  464,  465,  465,  465,
        0,  461,    0,    0,  462,  459,    0,  462,  467,  467,
      467,    0,    0,    0,  468,  468,  468,  463,    0,  466,
      464,    0,    0,    0,  466,  464,  468,    0,    0,  465,
      467,    0,    0,  465,  469,  469,  469,  470,  470,  470,
      471,  471,  471,    0,  467,    0,    0,  466,    0,    0,
      468,  473,  473,  473,    0,  468,  470,  465,  467,    0,
      469,  472,  472,  472,  471,  474,  474,  474,    0,  472,
      469,    0,    0,  470,    0,    0,  471,    0,  475,  475,

      475,  476,  476,  476,  470,    0,    0,  473,  469,    0,
        0,  474,  471,  476,    0,    0,    0,  472,  472,    0,
        0,  474,  475,    0,  477,  477,  477,  478,  478,  478,
      479,  479,  479,    0,  475,  478,    0,  476,    0,  474,
        0,  479,  476,    0,  480,  480,  480,  481,  481,  481,
      475,  477,  482,  482,  482,    0,  480,  483,  483,  483,
      477,    0,    0,  478,  478,    0,  479,    0,    0,  483,
      479,    0,  484,  484,  484,  485,  485,  485,    0,  477,
      480,    0,    0,  481,    0,  480,    0,    0,  482,  486,
      486,  486,    0,  483,    0,  485,    0,    0,  483,  484,

      487,  487,  487,  488,  488,  488,    0,    0,  484,    0,
        0,  485,  491,  491,  491,  486,  489,  489,  489,  490,
      490,  490,    0,  485,    0,  486,  487,  484,  492,  492,
      492,  489,  494,  494,  494,    0,  487,    0,  490,  488,
      492,    0,    0,  486,    0,  493,  493,  493,  491,  496,
      496,  496,  489,    0,  487,  490,  495,  495,  495,    0,
      489,  497,  497,  497,  492,    0,  490,  493,  494,  492,
      496,    0,  498,  498,  498,  495,    0,  499,  499,  499,
        0,  493,  500,  500,  500,  496,  501,  501,  501,  502,
      502,  502,  495,  498,    0,  493,  499,  497,  496,    0,

      503,  503,  503,  495,    0,  504,  504,  504,  498,    0,
      513,  513,  513,  499,  514,  514,  514,  502,  500,  503,
        0,  498,  501,    0,  499,  502,  504,  511,  511,  511,
      512,  512,  512,  514,    0,    0,  503,    0,    0,  511,
        0,  504,  515,  515,  515,  502,  513,  503,    0,    0,
      514,    0,  515,    0,  504,    0,  512,  516,  516,  516,
        0,  514,    0,  511,    0,    0,  512,    0,  511,  517,
      517,  517,  518,  518,  518,  520,  520,  520,  515,    0,
        0,  515,    0,    0,  512,  523,  523,  523,  516,  519,
      519,  519,    0,  516,    0,  521,  521,  521,  518,    0,

        0,  519,  522,  522,  522,  517,  521,    0,  518,    0,
      522,  520,  524,  524,  524,    0,  516,    0,  527,  527,
      527,  523,  525,  525,  525,  519,  518,    0,    0,    0,
      519,  521,    0,  524,  527,  521,    0,    0,  522,  522,
      526,  526,  526,  525,  528,  528,  528,    0,  524,  529,
      529,  529,  526,    0,  527,  530,  530,  530,  525,  529,
        0,  524,    0,  527,  531,  531,  531,  532,  532,  532,
        0,  525,  534,  534,  534,  531,  526,  533,  533,  533,
      528,  526,    0,  534,    0,  529,    0,    0,  529,    0,
        0,  530,    0,  535,  535,  535,  533,  536,  536,  536,

      531,    0,    0,  532,  531,  535,    0,    0,  534,  537,
      537,  537,  534,  533,  538,  538,  538,  539,  539,  539,
      540,  540,  540,    0,  533,    0,  543,  543,  543,  535,
        0,    0,    0,  536,  535,  541,  541,  541,  538,  544,
      544,  544,  542,  542,  542,  537,    0,  541,    0,    0,
      538,  540,    0,  539,  542,    0,  540,  543,  545,  545,
      545,    0,  543,  544,    0,    0,  538,    0,    0,  545,
        0,  541,  549,  549,  549,  544,  541,    0,  542,  540,
      546,  546,  546,  542,    0,  543,  547,  547,  547,    0,
        0,  544,    0,    0,  545,  548,  548,  548,  545,  546,

      550,  550,  550,    0,    0,  551,  551,  551,  549,  552,
      552,  552,  547,  551,    0,    0,  546,    0,    0,  550,
        0,  548,  547,    0,  553,  553,  553,  546,  560,  560,
      560,  548,  561,  561,  561,    0,  550,  562,  562,  562,
      547,  551,  551,  553,    0,  552,    0,  550,    0,  548,
      563,  563,  563,  564,  564,  564,  565,  565,  565,    0,
      553,  566,  566,  566,  560,  567,  567,  567,  561,    0,
        0,  553,    0,  562,    0,    0,  563,    0,  565,  568,
      568,  568,  569,  569,  569,  566,  563,    0,    0,  564,
        0,    0,  565,  570,  570,  570,    0,  566,  571,  571,

      571,  567,    0,    0,  563,  568,  565,    0,    0,  571,
      572,  572,  572,  566,    0,  568,    0,    0,  569,  570,
      573,  573,  573,  574,  574,  574,  575,  575,  575,  570,
        0,    0,  573,  568,  571,  576,  576,  576,  571,  577,
      577,  577,  572,  578,  578,  578,  572,  570,    0,  579,
      579,  579,  575,    0,    0,  578,  573,    0,    0,  574,
        0,  573,  575,  580,  580,  580,  581,  581,  581,    0,
      572,  576,    0,    0,  580,  577,    0,  581,    0,  578,
      575,  582,  582,  582,  578,  579,  583,  583,  583,  584,
      584,  584,  585,  585,  585,  586,  586,  586,    0,  580,

        0,    0,  581,  580,    0,    0,  581,  587,  587,  587,
      588,  588,  588,  589,  589,  589,  584,  582,  595,  595,
      595,    0,  583,    0,    0,  584,  588,    0,  585,    0,
        0,  586,  590,  590,  590,    0,    0,  589,  594,  594,
      594,    0,  595,  587,  584,    0,  588,    0,    0,  589,
        0,  596,  596,  596,  595,  588,  597,  597,  597,    0,
      594,    0,    0,  590,  596,  589,    0,    0,  590,    0,
      595,    0,  597,    0,  594,  598,  598,  598,  599,  599,
      599,    0,    0,  598,  601,  601,  601,  596,  594,    0,
        0,  590,  597,  596,  600,  600,  600,  602,  602,  602,

      598,  597,  600,  603,  603,  603,  604,  604,  604,    0,
        0,  598,  598,    0,  599,  605,  605,  605,    0,    0,
      601,    0,  606,  606,  606,    0,    0,    0,  598,    0,
      600,  600,  606,  602,  607,  607,  607,    0,    0,  603,
        0,    0,  604,  608,  608,  608,  609,  609,  609,    0,
        0,  605,    0,  613,  613,  613,    0,    0,  606,    0,
      607,  606,  614,  614,  614,  615,  615,  615,    0,    0,
      607,    0,    0,  615,  616,  616,  616,  613,    0,  608,
        0,    0,  609,  617,  617,  617,    0,    0,  607,  613,
      618,  618,  618,  621,  621,  621,  616,    0,  614,    0,

        0,  615,  615,    0,    0,  613,  619,  619,  619,  617,
      616,  620,  620,  620,  625,  625,  625,    0,    0,  617,
      626,  626,  626,  620,  616,    0,  618,    0,    0,  621,
      626,    0,  619,  627,  627,  627,    0,  617,    0,  628,
      628,  628,  619,  630,  630,  630,    0,  620,    0,    0,
      625,    0,  620,    0,  627,  628,  626,    0,    0,  626,
      619,  629,  629,  629,  632,  632,  632,    0,    0,  627,
        0,  633,  633,  633,    0,  628,  632,  629,    0,  630,
        0,    0,  627,    0,  628,    0,  634,  634,  634,  635,
      635,  635,  637,  637,  637,    0,    0,  629,    0,    0,

      632,    0,  638,  638,  638,  632,  629,  633,  634,    0,
        0,  635,  639,  639,  639,    0,  641,  641,  641,  642,
      642,  642,  634,  638,    0,  635,    0,    0,  637,    0,
        0,    0,    0,  639,    0,    0,  634,    0,  638,  635,
        0,    0,    0,    0,    0,    0,    0,    0,  639,    0,
        0,  638,  641,    0,    0,  642,    0,    0,    0,    0,
        0,  639,  665,  665,  665,  665,  666,  666,  666,  666,
      667,  667,  667,  667,  668,  668,  668,  668,  669,  669,
      669,  669,  670,  670,  670,  670,  671,  671,  671,  671,
      672,  672,  672,  672,  674,  674,  675,  675,  677,    0,

      677,  678,  678,  678,  678,  679,  679,  679,  679,  680,
      680,  680,  680,  681,  681,  682,  682,  684,    0,  684,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int delphi_flex_debug;
int delphi_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *delphitext;
#line 1 "source/parser/delphi/delphi.lpp"
#line 2 "source/parser/delphi/delphi.lpp"
// --------------------------------------------------------------------------------
// MIT License
//
// Copyright (c) 2018 Jens Kallup
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// --------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <ctype.h>
#include <limits.h>
#include <sys/types.h>

#include <QString>
#include <QDebug>

#define YYDEBUG 1

#undef  yylval
#define yylval delphilval

QString delphi_yytext;

#include "source/parser/delphi/delphi.tab.hh"

extern int line_no;
extern char * delphitext;

enum {
    T_NUMBER = 4,
    T_EQUAL = 5,
};

/**
 * Forward declerations
 **/
void Number ();
void HexaNumber ();

extern int yyerror(const char*);
extern int delphilex();









#line 1742 "source/parser/delphi/delphi.lex.cc"

#define INITIAL 0
#define COMMENTS 1
#define PASCAL_COMMENTS 2
#define DELPHI_COMMENTS 3
#define OPADD 4
#define OPSUB 5
#define OPDIV 6
#define OPMOD 7
#define NUM 8
#define CREATE_CMD 9
#define CREATE_FILE 10
#define CREATE_TABLE 11
#define NEW_TABLE_STRUCT 12
#define TABLE_STRUCT_BEG 13
#define TABLE_STRUCT_END 14
#define DATA_TYPE 15
#define PRIMARY_KEY 16
#define DATA_LENBEG 17
#define DATA_LENEND 18
#define PRIKEYS_BEG 19
#define PRIKEYS_END 20
#define FILENAME 21

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int delphilex_destroy (void );

int delphiget_debug (void );

void delphiset_debug (int debug_flag  );

YY_EXTRA_TYPE delphiget_extra (void );

void delphiset_extra (YY_EXTRA_TYPE user_defined  );

FILE *delphiget_in (void );

void delphiset_in  (FILE * in_str  );

FILE *delphiget_out (void );

void delphiset_out  (FILE * out_str  );

int delphiget_leng (void );

char *delphiget_text (void );

int delphiget_lineno (void );

void delphiset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int delphiwrap (void );
#else
extern int delphiwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( delphitext, delphileng, 1, delphiout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( delphiin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( delphiin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, delphiin))==0 && ferror(delphiin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(delphiin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int delphilex (void);

#define YY_DECL int delphilex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after delphitext and delphileng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 89 "source/parser/delphi/delphi.lpp"


#line 1953 "source/parser/delphi/delphi.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! delphiin )
			delphiin = stdin;

		if ( ! delphiout )
			delphiout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			delphiensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				delphi_create_buffer(delphiin,YY_BUF_SIZE );
		}

		delphi_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of delphitext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 665 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4321 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "source/parser/delphi/delphi.lpp"
{ printf("dot\n");  return _DOT_; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "source/parser/delphi/delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 93 "source/parser/delphi/delphi.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 95 "source/parser/delphi/delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "source/parser/delphi/delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 98 "source/parser/delphi/delphi.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 99 "source/parser/delphi/delphi.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 101 "source/parser/delphi/delphi.lpp"
{ BEGIN(COMMENTS); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 102 "source/parser/delphi/delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 103 "source/parser/delphi/delphi.lpp"
{ ++line_no; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 104 "source/parser/delphi/delphi.lpp"
;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 106 "source/parser/delphi/delphi.lpp"
{ BEGIN(PASCAL_COMMENTS); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 107 "source/parser/delphi/delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 108 "source/parser/delphi/delphi.lpp"
{ ++line_no; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 109 "source/parser/delphi/delphi.lpp"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 111 "source/parser/delphi/delphi.lpp"
{ BEGIN(DELPHI_COMMENTS); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 112 "source/parser/delphi/delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 113 "source/parser/delphi/delphi.lpp"
{ ++line_no; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 114 "source/parser/delphi/delphi.lpp"
;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 117 "source/parser/delphi/delphi.lpp"
{ printf("string lit\n");	return _STRING_LITTERAL_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 118 "source/parser/delphi/delphi.lpp"
{ printf("string\n");		return _STRING_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 120 "source/parser/delphi/delphi.lpp"
{ printf("programs\n");	 	return _PROGRAM_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 121 "source/parser/delphi/delphi.lpp"
{ printf("libary\n");	 	return _LIBRARY_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "source/parser/delphi/delphi.lpp"
{ printf("package\n");	 	return _PACKAGE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "source/parser/delphi/delphi.lpp"
{ printf("unit\n");	 	return _UNIT_;    }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 124 "source/parser/delphi/delphi.lpp"
{ printf("uses\n");	 	return _USES_;    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 125 "source/parser/delphi/delphi.lpp"
{ printf("imple\n");	 	return _IMPLEMENTATION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 126 "source/parser/delphi/delphi.lpp"
{ printf("initiali\n"); 	return _INITIALIZATION_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 127 "source/parser/delphi/delphi.lpp"
{ printf("finalization\n");	return _FINALIZATION_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 128 "source/parser/delphi/delphi.lpp"
{ printf("begin\n");	 	return _BEGIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 129 "source/parser/delphi/delphi.lpp"
{ printf("end\n");	 	return _END_;   }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 130 "source/parser/delphi/delphi.lpp"
{ printf("downto\n");		return _DOWNTO_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 131 "source/parser/delphi/delphi.lpp"
{ printf("to\n");		return _TO_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 132 "source/parser/delphi/delphi.lpp"
{ printf("implements\n");	return _IMPLEMENTS_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 133 "source/parser/delphi/delphi.lpp"
{ printf("case\n");		return _CASE_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 134 "source/parser/delphi/delphi.lpp"
{ printf("boolean\n");		return _BOOLEAN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 135 "source/parser/delphi/delphi.lpp"
{ printf("false\n");		return _FALSE_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 136 "source/parser/delphi/delphi.lpp"
{ printf("true\n");		return _TRUE_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 137 "source/parser/delphi/delphi.lpp"
{ printf("byte\n");		return _BYTE_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 138 "source/parser/delphi/delphi.lpp"
{ printf("char\n");		return _CHAR_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 139 "source/parser/delphi/delphi.lpp"
{ printf("shortint\n"); 	return _SHORTINT_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 140 "source/parser/delphi/delphi.lpp"
{ printf("word\n");		return _WORD_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 141 "source/parser/delphi/delphi.lpp"
{ printf("smallint\n"); 	return _SMALLINT_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 142 "source/parser/delphi/delphi.lpp"
{ printf("longword\n"); 	return _LONGWORD_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 143 "source/parser/delphi/delphi.lpp"
{ printf("cardinal\n"); 	return _CARDINAL_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 144 "source/parser/delphi/delphi.lpp"
{ printf("longint\n");		return _LONGINT_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 145 "source/parser/delphi/delphi.lpp"
{ printf("integer\n");		return _INTEGER_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 146 "source/parser/delphi/delphi.lpp"
{ printf("single\n");		return _SINGLE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 147 "source/parser/delphi/delphi.lpp"
{ printf("currency\n"); 	return _CURRENCY_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 148 "source/parser/delphi/delphi.lpp"
{ printf("double\n");		return _DOUBLE_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 149 "source/parser/delphi/delphi.lpp"
{ printf("extended\n"); 	return _EXTENDED_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 150 "source/parser/delphi/delphi.lpp"
{ printf("int64\n");		return _INT64_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 151 "source/parser/delphi/delphi.lpp"
{ printf("string\n");		return _STRINGTYPE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 152 "source/parser/delphi/delphi.lpp"
{ printf("not\n");	 	return _NOT_;   }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 153 "source/parser/delphi/delphi.lpp"
{ printf("in\n");	 	return _IN_;	}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 154 "source/parser/delphi/delphi.lpp"
{ printf("nil\n");	 	return _NIL_;	}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 155 "source/parser/delphi/delphi.lpp"
{ printf("or\n");	 	return _OR_;	}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 156 "source/parser/delphi/delphi.lpp"
{ printf("xor\n");	 	return _XOR_;	}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 157 "source/parser/delphi/delphi.lpp"
{ printf("and\n");	 	return _AND_;   }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 158 "source/parser/delphi/delphi.lpp"
{ printf("div\n");	 	return _DIV_;   }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 159 "source/parser/delphi/delphi.lpp"
{ printf("mod\n");	 	return _MOD_;   }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 160 "source/parser/delphi/delphi.lpp"
{ printf("shl\n");	 	return _SHL_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 161 "source/parser/delphi/delphi.lpp"
{ printf("shr\n");	 	return _SHR_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 162 "source/parser/delphi/delphi.lpp"
{ printf("at\n");	 	return _AT_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 163 "source/parser/delphi/delphi.lpp"
{ printf("do\n");	 	return _DO_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 164 "source/parser/delphi/delphi.lpp"
{ printf("for\n");	 	return _FOR_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "source/parser/delphi/delphi.lpp"
{ printf("var\n"); 	 	return _VAR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 166 "source/parser/delphi/delphi.lpp"
{ printf("on\n");		return _ON_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 167 "source/parser/delphi/delphi.lpp"
{ printf("is\n");		return _IS_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 168 "source/parser/delphi/delphi.lpp"
{ printf("default\n");   	return _DEFAULT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 169 "source/parser/delphi/delphi.lpp"
{ printf("nodefault\n"); 	return _NODEFAULT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 170 "source/parser/delphi/delphi.lpp"
{ printf("read\n");		return _READ_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 171 "source/parser/delphi/delphi.lpp"
{ printf("readonly\n"); 	return _READONLY_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 172 "source/parser/delphi/delphi.lpp"
{ printf("write\n");		return _WRITE_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 173 "source/parser/delphi/delphi.lpp"
{ printf("writeonly\n");	return _WRITEONLY_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 174 "source/parser/delphi/delphi.lpp"
{ printf("stored\n");		return _STORED_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 175 "source/parser/delphi/delphi.lpp"
{ printf("register\n");		return _REGISTER_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 176 "source/parser/delphi/delphi.lpp"
{ printf("abstract\n");		return _ABSTRACT_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "source/parser/delphi/delphi.lpp"
{ printf("virtual\n");		return _VIRTUAL_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 178 "source/parser/delphi/delphi.lpp"
{ printf("threadvar\n");	return _THREADVAR_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 179 "source/parser/delphi/delphi.lpp"
{ printf("except\n");		return _EXCEPT_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 180 "source/parser/delphi/delphi.lpp"
{ printf("index\n");		return _INDEX_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 181 "source/parser/delphi/delphi.lpp"
{ printf("dispid\n");		return _DISPID_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 182 "source/parser/delphi/delphi.lpp"
{ printf("dispinterface\n");	return _DISPINTERFACE_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 183 "source/parser/delphi/delphi.lpp"
{ printf("interface\n");	return _INTERFACE_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 184 "source/parser/delphi/delphi.lpp"
{ printf("if\n");		return _IF_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 185 "source/parser/delphi/delphi.lpp"
{ printf("else\n");		return _ELSE_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 186 "source/parser/delphi/delphi.lpp"
{ printf("then\n");		return _THEN_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 187 "source/parser/delphi/delphi.lpp"
{ printf("repeat\n");		return _REPEAT_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 188 "source/parser/delphi/delphi.lpp"
{ printf("until\n");		return _UNTIL_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 189 "source/parser/delphi/delphi.lpp"
{ printf("while\n");		return _WHILE_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 190 "source/parser/delphi/delphi.lpp"
{ printf("pascal\n");		return _PASCAL_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 191 "source/parser/delphi/delphi.lpp"
{ printf("cdecl\n");		return _CDECL_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 192 "source/parser/delphi/delphi.lpp"
{ printf("stdcall\n");		return _STDCALL_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 193 "source/parser/delphi/delphi.lpp"
{ printf("safecall\n"); 	return _SAFECALL_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 194 "source/parser/delphi/delphi.lpp"
{ printf("overload\n"); 	return _OVERLOAD_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 195 "source/parser/delphi/delphi.lpp"
{ printf("override\n"); 	return _OVERRIDE_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 196 "source/parser/delphi/delphi.lpp"
{ printf("class\n");		return _CLASS_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 197 "source/parser/delphi/delphi.lpp"
{ printf("try\n");		return _TRY_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 198 "source/parser/delphi/delphi.lpp"
{ printf("finally\n");		return _FINALLY_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 199 "source/parser/delphi/delphi.lpp"
{ printf("inherited\n");	return _INHERITED_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 200 "source/parser/delphi/delphi.lpp"
{ printf("constructor\n");	return _CONSTRUCTOR_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 201 "source/parser/delphi/delphi.lpp"
{ printf("destructor\n");	return _DESTRUCTOR_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 202 "source/parser/delphi/delphi.lpp"
{ printf("public\n");		return _PUBLIC_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 203 "source/parser/delphi/delphi.lpp"
{ printf("protected\n");	return _PROTECTED_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 204 "source/parser/delphi/delphi.lpp"
{ printf("private\n");		return _PRIVATE_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 205 "source/parser/delphi/delphi.lpp"
{ printf("property\n"); 	return _PROPERTY_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 206 "source/parser/delphi/delphi.lpp"
{ printf("published\n");	return _PUBLISHED_; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 207 "source/parser/delphi/delphi.lpp"
{ printf("dynamic\n");		return _DYNAMIC_; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 208 "source/parser/delphi/delphi.lpp"
{ printf("absolute\n"); 	return _ABSOLUTE_; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 209 "source/parser/delphi/delphi.lpp"
{ printf("packed\n");		return _PACKED_; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 210 "source/parser/delphi/delphi.lpp"
{ printf("record\n");		return _RECORD_; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 211 "source/parser/delphi/delphi.lpp"
{ printf("set\n");		return _SET_; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 212 "source/parser/delphi/delphi.lpp"
{ printf("array\n");		return _ARRAY_; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 213 "source/parser/delphi/delphi.lpp"
{ printf("of\n");		return _OF_; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 214 "source/parser/delphi/delphi.lpp"
{ printf("reintroduce\n");	return _REINTRODUCE_; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 215 "source/parser/delphi/delphi.lpp"
{ printf("message\n");		return _MESSAGE_; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 216 "source/parser/delphi/delphi.lpp"
{ printf("type\n");		return _TYPE_; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 217 "source/parser/delphi/delphi.lpp"
{ printf("procedure\n");	return _PROCEDURE_; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 218 "source/parser/delphi/delphi.lpp"
{ printf("function\n"); 	return _FUNCTION_; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 221 "source/parser/delphi/delphi.lpp"
{ printf("file\n");	return _FILE_;  }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 223 "source/parser/delphi/delphi.lpp"
{ printf("<=\n");	return _LESSER_THAN_;  }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 224 "source/parser/delphi/delphi.lpp"
{ printf(">=\n");	return _GREATER_THAN_; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 225 "source/parser/delphi/delphi.lpp"
{ printf("=>\n");	return _GREATER_THAN_; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 226 "source/parser/delphi/delphi.lpp"
{ printf("<>\n");	return _NOT_EQUAL_;    }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 228 "source/parser/delphi/delphi.lpp"
{ printf("..\n");	return _DBL_POINT_;  }	
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 229 "source/parser/delphi/delphi.lpp"
{ printf(":=\n");	return _ASSIGNMENT_; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 231 "source/parser/delphi/delphi.lpp"
{ delphi_yytext = QString(delphitext);
  qDebug() << delphi_yytext;
  return _NAME_;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 236 "source/parser/delphi/delphi.lpp"
{ return FILENAME; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 238 "source/parser/delphi/delphi.lpp"
{ printf("new: file  \n"); BEGIN(CREATE_FILE); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 239 "source/parser/delphi/delphi.lpp"
{ printf("new: table \n"); BEGIN(CREATE_TABLE);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 241 "source/parser/delphi/delphi.lpp"
{
printf("wwwmos\n");
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("filserl1: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 249 "source/parser/delphi/delphi.lpp"
{
printf("ccmos\n");
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("filserl2: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 258 "source/parser/delphi/delphi.lpp"
{
printf("fos\n");
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("tabsel1: -> %s\n",txt);
    free(txt);
    BEGIN(NEW_TABLE_STRUCT);
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 266 "source/parser/delphi/delphi.lpp"
{
printf("mos\n");
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("tabsel2: -> %s\n",txt);
    free(txt);
    BEGIN(NEW_TABLE_STRUCT);
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 275 "source/parser/delphi/delphi.lpp"
{
    printf("beg\n");
    BEGIN(TABLE_STRUCT_BEG);
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 280 "source/parser/delphi/delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    if (strcmp(txt,"primary") == 0) {
        printf("a key\n");
        BEGIN(PRIMARY_KEY);
    }
    else {
        printf("ident: %s\n",delphitext);
        BEGIN(DATA_TYPE);
    }
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 292 "source/parser/delphi/delphi.lpp"
{ printf("table struct ok.\n"); BEGIN(INITIAL); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 294 "source/parser/delphi/delphi.lpp"
{
    printf(" a key is given...\n");
    BEGIN(PRIKEYS_BEG);
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 298 "source/parser/delphi/delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("1prikey: %s\n",txt);
    free(txt);
    BEGIN(PRIKEYS_END);
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 305 "source/parser/delphi/delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("2prikey: %s\n",txt);
    free(txt);
    BEGIN(PRIKEYS_BEG);
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 312 "source/parser/delphi/delphi.lpp"
{
    printf("tabselle has prikeys.\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 317 "source/parser/delphi/delphi.lpp"
{ printf(" B, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 318 "source/parser/delphi/delphi.lpp"
{ printf(" L, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 319 "source/parser/delphi/delphi.lpp"
{ printf(" N, \n"); BEGIN(DATA_LENBEG); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 320 "source/parser/delphi/delphi.lpp"
{ printf(" C, \n"); BEGIN(DATA_LENBEG); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 321 "source/parser/delphi/delphi.lpp"
{ printf(" D, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 323 "source/parser/delphi/delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("1>numser: %s\n",txt);
    free(txt);
    BEGIN(TABLE_STRUCT_END);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 330 "source/parser/delphi/delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("2>numser: %s\n",txt);
    free(txt);
    printf("nax\n");
    BEGIN(TABLE_STRUCT_BEG);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 339 "source/parser/delphi/delphi.lpp"
{ printf("num: %d\n", atoi(delphitext)); return _NUMBER_; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 340 "source/parser/delphi/delphi.lpp"
{ printf("Num: %d\n", atoi(delphitext)); return _NUMBER_; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 343 "source/parser/delphi/delphi.lpp"
{ printf("%c\n", *delphitext); return *delphitext; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 345 "source/parser/delphi/delphi.lpp"
{ }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 346 "source/parser/delphi/delphi.lpp"
{ ++line_no; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 347 "source/parser/delphi/delphi.lpp"
;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENTS):
case YY_STATE_EOF(PASCAL_COMMENTS):
case YY_STATE_EOF(DELPHI_COMMENTS):
case YY_STATE_EOF(OPADD):
case YY_STATE_EOF(OPSUB):
case YY_STATE_EOF(OPDIV):
case YY_STATE_EOF(OPMOD):
case YY_STATE_EOF(NUM):
case YY_STATE_EOF(CREATE_CMD):
case YY_STATE_EOF(CREATE_FILE):
case YY_STATE_EOF(CREATE_TABLE):
case YY_STATE_EOF(NEW_TABLE_STRUCT):
case YY_STATE_EOF(TABLE_STRUCT_BEG):
case YY_STATE_EOF(TABLE_STRUCT_END):
case YY_STATE_EOF(DATA_TYPE):
case YY_STATE_EOF(PRIMARY_KEY):
case YY_STATE_EOF(DATA_LENBEG):
case YY_STATE_EOF(DATA_LENEND):
case YY_STATE_EOF(PRIKEYS_BEG):
case YY_STATE_EOF(PRIKEYS_END):
case YY_STATE_EOF(FILENAME):
#line 348 "source/parser/delphi/delphi.lpp"
{ return 0; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 349 "source/parser/delphi/delphi.lpp"
ECHO;
	YY_BREAK
#line 2924 "source/parser/delphi/delphi.lex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed delphiin at a new source and called
			 * delphilex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = delphiin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( delphiwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * delphitext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of delphilex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					delphirealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			delphirestart(delphiin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) delphirealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 665 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 665 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 664);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up delphitext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					delphirestart(delphiin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( delphiwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve delphitext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void delphirestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        delphiensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            delphi_create_buffer(delphiin,YY_BUF_SIZE );
	}

	delphi_init_buffer(YY_CURRENT_BUFFER,input_file );
	delphi_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void delphi_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		delphipop_buffer_state();
	 *		delphipush_buffer_state(new_buffer);
     */
	delphiensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	delphi_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (delphiwrap()) processing, but the only time this flag
	 * is looked at is after delphiwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void delphi_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	delphiin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE delphi_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) delphialloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in delphi_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) delphialloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in delphi_create_buffer()" );

	b->yy_is_our_buffer = 1;

	delphi_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with delphi_create_buffer()
 * 
 */
    void delphi_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		delphifree((void *) b->yy_ch_buf  );

	delphifree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a delphirestart() or at EOF.
 */
    static void delphi_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	delphi_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then delphi_init_buffer was _probably_
     * called from delphirestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void delphi_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		delphi_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void delphipush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	delphiensure_buffer_stack();

	/* This block is copied from delphi_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from delphi_switch_to_buffer. */
	delphi_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void delphipop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	delphi_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		delphi_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void delphiensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)delphialloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in delphiensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)delphirealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in delphiensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE delphi_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) delphialloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in delphi_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	delphi_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to delphilex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       delphi_scan_bytes() instead.
 */
YY_BUFFER_STATE delphi_scan_string (yyconst char * yystr )
{
    
	return delphi_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to delphilex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE delphi_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) delphialloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in delphi_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = delphi_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in delphi_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up delphitext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		delphitext[delphileng] = (yy_hold_char); \
		(yy_c_buf_p) = delphitext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		delphileng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int delphiget_lineno  (void)
{
        
    return delphilineno;
}

/** Get the input stream.
 * 
 */
FILE *delphiget_in  (void)
{
        return delphiin;
}

/** Get the output stream.
 * 
 */
FILE *delphiget_out  (void)
{
        return delphiout;
}

/** Get the length of the current token.
 * 
 */
int delphiget_leng  (void)
{
        return delphileng;
}

/** Get the current token.
 * 
 */

char *delphiget_text  (void)
{
        return delphitext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void delphiset_lineno (int  line_number )
{
    
    delphilineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see delphi_switch_to_buffer
 */
void delphiset_in (FILE *  in_str )
{
        delphiin = in_str ;
}

void delphiset_out (FILE *  out_str )
{
        delphiout = out_str ;
}

int delphiget_debug  (void)
{
        return delphi_flex_debug;
}

void delphiset_debug (int  bdebug )
{
        delphi_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from delphilex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    delphiin = stdin;
    delphiout = stdout;
#else
    delphiin = (FILE *) 0;
    delphiout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * delphilex_init()
     */
    return 0;
}

/* delphilex_destroy is for both reentrant and non-reentrant scanners. */
int delphilex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		delphi_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		delphipop_buffer_state();
	}

	/* Destroy the stack itself. */
	delphifree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * delphilex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *delphialloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *delphirealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void delphifree (void * ptr )
{
	free( (char *) ptr );	/* see delphirealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 349 "source/parser/delphi/delphi.lpp"



