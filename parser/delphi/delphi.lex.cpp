#line 2 "delphi.lex.cpp"

#line 4 "delphi.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer delphi_create_buffer
#define yy_delete_buffer delphi_delete_buffer
#define yy_flex_debug delphi_flex_debug
#define yy_init_buffer delphi_init_buffer
#define yy_flush_buffer delphi_flush_buffer
#define yy_load_buffer_state delphi_load_buffer_state
#define yy_switch_to_buffer delphi_switch_to_buffer
#define yyin delphiin
#define yyleng delphileng
#define yylex delphilex
#define yylineno delphilineno
#define yyout delphiout
#define yyrestart delphirestart
#define yytext delphitext
#define yywrap delphiwrap
#define yyalloc delphialloc
#define yyrealloc delphirealloc
#define yyfree delphifree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE delphirestart(delphiin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int delphileng;

extern FILE *delphiin, *delphiout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE delphilex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-delphilineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < delphileng; ++yyl )\
                    if ( delphitext[yyl] == '\n' )\
                        --delphilineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up delphitext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up delphitext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via delphirestart()), so that the user can continue scanning by
	 * just pointing delphiin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when delphitext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int delphileng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow delphiwrap()'s to do buffer switches
 * instead of setting up a fresh delphiin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void delphirestart (FILE *input_file  );
void delphi_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE delphi_create_buffer (FILE *file,int size  );
void delphi_delete_buffer (YY_BUFFER_STATE b  );
void delphi_flush_buffer (YY_BUFFER_STATE b  );
void delphipush_buffer_state (YY_BUFFER_STATE new_buffer  );
void delphipop_buffer_state (void );

static void delphiensure_buffer_stack (void );
static void delphi_load_buffer_state (void );
static void delphi_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER delphi_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE delphi_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE delphi_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE delphi_scan_bytes (yyconst char *bytes,int len  );

void *delphialloc (yy_size_t  );
void *delphirealloc (void *,yy_size_t  );
void delphifree (void *  );

#define yy_new_buffer delphi_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        delphiensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            delphi_create_buffer(delphiin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        delphiensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            delphi_create_buffer(delphiin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define delphiwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *delphiin = (FILE *) 0, *delphiout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int delphilineno;

int delphilineno = 1;

extern char delphitext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up delphitext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	delphileng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( delphileng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &delphitext[(yy_more_offset)], (yytext_ptr), delphileng + 1 ); \
	delphileng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 157
#define YY_END_OF_BUFFER 158
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[764] =
    {   0,
      154,  155,  154,  155,  158,  156,  157,  154,  156,  157,
      155,  157,  156,  157,  156,  157,  153,  156,  157,  153,
      156,  157,    1,  150,  151,  156,  157,  153,  156,  157,
      150,  151,  156,  157,  153,  156,  157,  156,  157,  153,
      156,  157,  156,  157,  126,  156,  157,  126,  156,  157,
      126,  156,  157,  126,  156,  157,  126,  156,  157,  126,
      156,  157,  126,  156,  157,  126,  156,  157,  126,  156,
      157,  126,  156,  157,  126,  156,  157,  126,  156,  157,
      126,  156,  157,  126,  156,  157,  126,  156,  157,  126,
      156,  157,  126,  156,  157,  126,  156,  157,  126,  156,

      157,  126,  156,  157,  126,  156,  157,  153,  156,  157,
       16,  153,  156,  157,   11,  157,   10,  157,   11,  157,
       15,  157,   14,  157,   15,  157,   19,  157,   18,  157,
       17,   19,  157,  157,  157,  157,  157,  133,  157,  157,
      135,  157,  136,  157,  137,  157,  138,  157,  143,  157,
      146,  157,  147,  157,  144,  157,  145,  157,  139,  157,
      157,  140,  157,  142,  157,  154,  155,    4,   12,    5,
      124,  150,  151,  150,  151,    8,    2,  125,  120,  123,
      122,  121,  126,  126,  126,  126,  126,   62,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,

       63,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,   84,  126,  126,   53,  126,   67,  126,  126,  126,
      126,  126,  126,  126,  113,  126,   66,  126,   55,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,   31,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,    9,   13,  133,  133,  135,
      135,  137,  137,  141,  140,  140,    4,    6,    4,    5,
        7,    2,    3,  126,   57,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
       58,  126,  126,  126,  126,  126,   29,  126,  126,  126,

      126,  126,  126,   64,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,   59,  126,   54,  126,  126,
       52,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  111,  126,   60,  126,  126,
       61,  126,  126,  126,  126,  126,  126,  126,  126,  126,
       97,  126,  126,  126,  126,  126,   65,  126,  126,  126,
      126,  126,   56,  126,  148,  141,  126,  126,  126,  126,
      126,   37,  126,  126,   33,  126,  126,   38,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,   85,  126,
      126,  126,  126,  119,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,   70,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
       86,  126,  126,   36,  126,  116,  126,   23,  126,  126,
       24,  126,  126,  126,   40,  126,  126,  130,  143,  146,
      147,  149,  126,  126,  112,  126,   28,  126,  126,  126,
       91,  126,   96,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,   35,  126,  126,  126,  126,  126,
       80,  126,  126,  126,   50,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,   88,  126,  126,
       89,  126,   72,  126,  131,  126,  126,  126,  126,  126,
      126,  126,  126,   81,  126,  126,   48,  126,   30,  126,
      126,   79,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,   21,  126,  126,  126,  126,  126,  126,
      126,  126,  109,  126,   90,  126,  126,  126,  126,  126,
      126,  102,  126,  126,  126,  110,  126,  126,  126,   87,
      126,  126,  126,   46,  126,  126,  126,   74,  126,   51,
      126,  128,  126,  126,  126,  126,  126,   34,  126,  126,

      126,  126,   68,  126,  126,  126,  107,  126,  126,  126,
       98,  126,  126,  126,  126,  126,  126,   45,  126,  126,
       44,  126,  126,  115,  126,  126,  126,  126,   22,  126,
      126,  104,  126,   20,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,   92,  126,  126,  126,   77,  126,
      126,  143,  144,  145,  108,  126,   76,  126,   43,  126,
      126,   47,  126,  126,  126,   49,  126,  126,  118,  126,
      126,  126,  126,  126,  126,   42,  126,  126,   94,  126,
       95,  126,  117,  126,  105,  126,  126,  126,   71,  126,
       75,  126,  126,   93,  126,   39,  126,   41,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,   99,  126,
      126,   83,  126,   69,  126,  103,  126,  106,  126,  126,
      126,   78,  126,   73,  126,  126,  101,  126,  126,  126,
      126,  152,  126,   32,  126,  126,  126,  126,  127,  132,
      134,  100,  126,  126,  126,  126,  126,  114,  126,  126,
       27,  126,  126,  126,   82,  126,  126,  126,   25,  126,
       26,  126,  129
    } ;

static yyconst flex_int16_t yy_accept[678] =
    {   0,
        1,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    6,    8,   11,   13,   15,
       17,   20,   23,   28,   31,   35,   38,   40,   43,   45,
       48,   51,   54,   57,   60,   63,   66,   69,   72,   75,
       78,   81,   84,   87,   90,   93,   96,   99,  102,  105,
      108,  111,  115,  117,  119,  121,  123,  125,  127,  129,
      131,  134,  135,  136,  137,  138,  140,  141,  143,  145,

      147,  149,  151,  153,  155,  157,  159,  161,  162,  164,
      166,  167,  168,  169,  170,  171,  174,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
      200,  201,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  214,  215,  217,  219,  220,  221,  222,  223,
      224,  225,  227,  229,  231,  232,  233,  234,  235,  236,
      237,  238,  239,  240,  241,  242,  243,  244,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  256,
      257,  258,  258,  258,  258,  259,  260,  260,  261,  262,

      263,  264,  264,  264,  264,  264,  264,  264,  265,  266,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  277,
      278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
      288,  289,  290,  291,  293,  294,  295,  296,  297,  299,
      300,  301,  302,  303,  304,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  318,  320,  321,  323,
      324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
      334,  335,  336,  338,  340,  341,  343,  344,  345,  346,
      347,  348,  349,  350,  351,  353,  354,  355,  356,  357,
      359,  360,  361,  362,  363,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  366,  367,  368,  369,
      370,  371,  372,  374,  375,  377,  378,  380,  381,  382,
      383,  384,  385,  386,  387,  388,  389,  391,  392,  393,
      394,  396,  397,  398,  399,  400,  401,  402,  403,  404,
      405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
      415,  416,  417,  418,  420,  421,  422,  423,  424,  425,
      426,  427,  428,  429,  430,  431,  433,  434,  436,  438,
      440,  441,  443,  444,  445,  447,  448,  448,  449,  449,
      449,  449,  450,  451,  452,  452,  452,  452,  453,  454,
      455,  457,  459,  460,  461,  463,  465,  466,  467,  468,

      469,  470,  471,  472,  473,  474,  475,  477,  478,  479,
      480,  481,  483,  484,  485,  487,  488,  489,  490,  491,
      492,  493,  494,  495,  496,  497,  498,  499,  500,  501,
      502,  503,  504,  505,  506,  507,  508,  509,  510,  511,
      512,  513,  514,  515,  516,  517,  518,  520,  521,  523,
      525,  525,  526,  526,  526,  526,  526,  526,  527,  528,
      529,  530,  531,  532,  533,  534,  536,  537,  539,  541,
      542,  544,  545,  546,  547,  548,  549,  550,  551,  552,
      553,  554,  556,  557,  558,  559,  560,  561,  562,  563,
      565,  567,  568,  569,  570,  571,  572,  574,  575,  576,

      578,  579,  580,  582,  583,  584,  586,  587,  588,  590,
      593,  594,  595,  596,  596,  596,  596,  596,  596,  596,
      597,  598,  600,  601,  602,  603,  605,  606,  607,  609,
      610,  611,  613,  614,  615,  616,  617,  618,  620,  621,
      623,  624,  626,  627,  628,  629,  631,  632,  634,  636,
      637,  638,  639,  640,  641,  642,  643,  644,  645,  647,
      648,  649,  651,  652,  652,  652,  652,  653,  654,  655,
      657,  659,  661,  662,  664,  665,  666,  668,  669,  671,
      672,  673,  674,  675,  676,  678,  679,  681,  683,  685,
      687,  688,  689,  691,  693,  694,  696,  698,  700,  701,

      702,  703,  703,  703,  703,  704,  705,  706,  707,  708,
      709,  711,  712,  714,  716,  718,  720,  721,  722,  724,
      726,  726,  726,  726,  727,  729,  730,  731,  733,  734,
      736,  737,  738,  740,  740,  741,  742,  744,  745,  746,
      747,  748,  750,  750,  751,  753,  754,  755,  755,  757,
      758,  759,  759,  761,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  764,  764
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    4,    1,    5,    1,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   14,   14,
       14,   15,   14,   16,   14,   14,   14,   17,   18,   19,
       20,   21,   22,   18,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       32,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,    1,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   32,   61,   62,   63,   64,
       65,   66,   32,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[79] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    3,    1,    4,    4,    4,    1,    1,    1,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[698] =
    {   0,
        0,    0,   76,   77,   78,   79,   80,   85,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   62,
      163,  241,  319,  397,  681,  680,  475,  553,  678,  677,
       70,   73,  677,  676,  672,  669,    0,    0,  631,  709,
      667,  620,    0,    0,  617, 4373,  610,  608,  605,  601,
      600, 4373,   96,   92,  101,  587,   71,  585,  585,  774,
      718,  830,  887,  757,  948,  106,  135, 1005,  173,  250,
      328, 1060,  244,  178, 1118, 1174,  765,  331,  390,  407,
      598, 4373, 4373, 4373,  587, 4373, 4373,  590, 4373, 4373,
     4373, 4373,   83,  138,  168,  124,  169,  130, 4373,  138,

     4373,   64,  168,  176,  158,  160, 4373,  192,  204, 4373,
      593,  537,  130, 4373,  536,  256,  264, 4373,  534, 4373,
     4373, 4373, 4373, 4373,    0,  334,  726,  416,  781,  341,
      410,  484,  808,  854,  487,  490,  493,  562,  859,  897,
      836,  916,  640,  926,  565,  981,  643,  995,  977,  966,
      733,  419,  820, 1235,  496,  568, 1049, 1009,  573, 1056,
     1068,  646,  649,  652, 1064, 1114, 1141, 1170,  954, 1291,
     1038, 1157, 1208, 1238, 1128, 1295, 1241,  655, 1284, 1323,
     1349, 1213, 1352, 1355, 1361, 1369, 1382, 1372,  524, 4373,
     4373,  169,  245,  242,    0,  358,  243,    0,  436,    0,

      201,  172,  261,  241,  322,  253,  278,  532,  523,  361,
      529, 4373,  144,  528, 4373,  527, 4373, 1400, 1146, 1411,
     1415, 1433, 1429, 1438, 1443, 1457, 1462, 1472, 1476, 1482,
     1491, 1504, 1488, 1267, 1532, 1516, 1543, 1547, 1520, 1554,
     1561, 1575, 1586, 1593, 1604, 1607, 1613, 1619, 1624, 1632,
     1652, 1657, 1663, 1675, 1680, 1683, 1686, 1691, 1695, 1713,
     1708, 1724, 1739, 1742, 1758, 1767, 1788, 1747, 1791, 1805,
     1817, 1820, 1834, 1838, 1843, 1846, 1849, 1865, 1877, 1872,
     1889, 1899, 1903, 1910, 1918, 1928, 1931, 1937, 1959, 1942,
     1962, 1971, 1975, 1993, 2000,  521,  325,  324,  327,  332,

      394,  398,  413,  486,  492,  146,  526, 2003, 2009, 2024,
     2027, 2031, 2041, 2052, 2057, 2065, 2070, 2074, 2079, 2090,
     2086, 2108, 2118, 2129, 2136, 2139, 2146, 2150, 2156, 2167,
     2170, 2194, 2184, 2197, 2215, 2222, 2225, 2243,  512, 2254,
     2263, 2266, 2273, 2285, 2293, 2325, 2331, 2335, 2342, 2348,
     2235, 2352, 2358, 2355, 2382, 2386, 2397, 2408, 2414, 2420,
     2428, 2436, 2441, 2458, 2431, 2461, 2485, 2488, 2491, 2501,
     2504, 2507, 2511, 2514, 2517, 2529,  513, 4373,  558,  559,
      566,  567, 4373, 4373,  571,  399,  295, 4373, 2532, 2561,
     2535, 2545, 2574, 2557, 2584, 2589, 2595, 2600, 2603, 2608,

     2616, 2633, 2642, 2654, 2658, 2661, 2667, 2686, 2680, 2707,
     2710, 2714, 2719, 2737,    0, 2727, 2741, 2748, 2760, 2766,
     2786, 2790, 2770, 2794, 2804, 2812, 2832, 2835, 2844, 2855,
     2858, 2865, 2877, 2884, 2896, 2873, 2918, 2922, 2938, 2944,
     2950, 2956, 2964, 2967, 2994, 2998, 2925, 3005, 3015, 3018,
      513, 4373,  486,  554,  649,  650,  705, 3021, 3025, 3044,
     3059, 3049, 3071, 3083, 3078, 3090, 3098, 3102, 3112, 3121,
     3128, 3141, 3144, 3150, 3162, 3155, 3166, 3169, 3189, 3193,
     3214, 3219, 3227, 3232, 3242, 3238, 3258, 3261, 3270, 3276,
     3286, 3289, 3303, 3299, 3317, 3328, 3309, 3331, 3337, 3349,

     3358, 3361, 3377, 3387, 3380, 3390, 3403, 3408, 3418, 3421,
     3431, 3437, 3441,  496,  715,  716,  699,  720,  721, 3464,
     3449, 3446, 3470, 3492, 3479, 3496, 3508, 3512, 3519, 3536,
     3522, 3541, 3550, 3564, 3567, 3579, 3582, 3593, 3596, 3608,
     3611, 3624, 3637, 3641, 3649, 3658, 3663, 3666, 3669, 3679,
     3688, 3696, 3692, 3712, 3719, 3726, 3734, 3740, 3743,  742,
     3753, 3757, 3768,  509,  765,  768, 4373, 4373, 4373, 3781,
     3784, 3796, 3799, 3802, 3806, 3809, 3812, 3823, 3830, 3840,
     3863, 3868, 3871, 3874, 3883, 3892, 3896, 3901, 3912, 3921,
     3924, 3939, 3942, 3952, 3955, 3962, 3966, 3969,  739, 3972,

     3984,  441,  784,  791, 3994, 4012, 4018, 4022, 4026, 4034,
     4040, 4073, 4046, 4052, 4056, 4084, 4090,  768, 4094, 4097,
      445,  439,  438, 4103, 4106, 4113, 4116, 4123, 4135, 4144,
     4147, 4157,    0,  450, 4373, 4373, 4163, 4175, 4187, 4196,
     4203, 4191,  376, 4206, 4216, 4221, 4229,  437, 4225, 4234,
     4245,  429, 4259, 4263,  381,  365,  377,  372,  342,  346,
      354,  341,  264,  258,  295,  251,  291,  291,  229,  158,
      228,  215,  214,  179, 4373, 4373, 4314, 4318, 4322, 4326,
     4330, 4334, 4338, 4342,  196, 4344, 4346,  156, 4349, 4353,
     4357, 4361,  155, 4363, 4365,   89, 4368

    } ;

static yyconst flex_int16_t yy_def[698] =
    {   0,
      676,    1,  677,  677,  678,  678,  679,  679,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      681,  681,  682,  682,  680,  680,  683,  683,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  684,  684,
      680,  680,  680,  680,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,   65,  685,  685,  685,  685,  685,   76,  685,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  686,  676,  687,  676,  688,

      676,  676,  676,  676,  676,  676,  676,  676,  689,  676,
      676,  676,  690,  676,  691,  676,  676,  676,  692,  676,
      676,  676,  676,  676,  693,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  676,  676,
      676,  676,  676,  676,  694,  686,  676,  695,  687,  696,

      688,  676,  676,  676,  676,  676,  676,  676,  697,  689,
      690,  676,  690,  691,  676,  692,  676,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  693,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  693,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      676,  676,  676,  676,  676,  676,  676,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  676,  676,  676,  676,  676,  676,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  693,
      685,  685,  685,  676,  676,  676,  676,  676,  676,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  693,  685,

      685,  676,  676,  676,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  693,  685,  685,
      676,  676,  676,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  693,  676,  676,  676,  685,  685,  685,  685,
      685,  685,  676,  685,  685,  685,  685,  676,  685,  685,
      685,  676,  685,  685,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,    0,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676

    } ;

static yyconst flex_int16_t yy_nxt[4452] =
    {   0,
       46,   47,   48,   46,   49,   50,   46,   51,   52,   52,
       52,   53,   54,   55,   55,   55,   56,   52,   57,   58,
       59,   46,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   66,   66,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   66,   66,   46,   46,   81,
       46,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       66,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   66,   66,   82,   46,   52,   84,   84,
       87,   87,   90,   85,   85,   88,   88,   90,   93,   93,
      121,  122,  200,  102,  103,  104,  102,  103,  104,  118,

      202,   94,   94,  105,  119,  106,  105,  116,  106,  117,
      117,  117,  117,  192,  117,  117,  117,   93,   93,  125,
      125,  125,  102,  103,  104,  102,  103,  104,  202,   94,
       94,  105,  212,  106,  105,  195,  106,  195,  195,  195,
      213,  198,  192,  198,  198,  198,  212,  387,  125,  125,
      125,  200,  200,  200,  213,  388,  125,   91,  125,  201,
      193,  151,   91,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   95,   92,   92,   92,  125,  125,  125,  125,  193,
      151,  125,  125,  125,  205,  194,  197,  203,  204,  126,

      675,  206,  297,  156,  170,  207,  207,  207,  301,  157,
       92,   92,   92,  208,  200,  200,  200,  209,  209,  209,
      674,  673,  205,  125,  194,  197,  203,  204,  125,  206,
      297,  672,  156,  170,  671,  670,  301,  157,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   95,
       92,   92,   92,  125,  125,  125,  166,  117,  298,  117,
      117,  117,  299,  300,  126,  117,  158,  117,  117,  117,
      167,  303,  168,  302,  306,  169,  159,  305,   92,   92,
       92,  207,  207,  207,  669,  166,  387,  298,  668,  667,

      125,  299,  300,  126,  388,  158,  666,  665,  167,  303,
      168,  664,  302,  169,  159,  305,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   97,   92,   92,
       92,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      304,  378,  663,  183,  125,  125,  125,  379,  160,  662,
      380,  184,  661,  660,  161,  381,   92,   92,   92,  195,
      208,  195,  195,  195,  209,  209,  209,  659,  125,  304,
      378,  125,  183,  658,  125,  379,  657,  160,  380,  656,
      184,  125,  161,  381,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   97,   92,   92,   92,  185,
      125,  125,  125,  125,  125,  125,  186,  382,  187,  125,
      125,  125,  125,  125,  125,  126,  383,  457,  221,  384,
      655,  219,  652,  188,   92,   92,   92,  198,  185,  198,
      198,  198,  648,  643,  186,  382,  187,  125,  636,  635,
      125,  634,  621,  126,  383,  457,  125,  221,  384,  125,
      219,  188,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  227,  226,  602,  228,  385,  564,  386,  514,
      222,  515,   92,   92,   92,  451,  415,  307,  377,  217,
      215,  676,  208,  307,  125,  296,  217,  125,  215,  112,
      125,  227,  226,  125,  228,  385,  125,  386,  222,  515,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  452,  453,  125,  125,  125,  516,
      239,  253,  454,  455,  111,  456,  191,  229,  256,  190,

       92,   92,   92,  189,  124,  123,  120,  115,  114,  113,
      112,  111,  125,  452,  453,  125,  676,  516,  125,  239,
      253,  454,  455,  125,  456,  229,  110,  256,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  517,  518,  110,  108,  237,  242,  108,   92,   92,
       92,  107,  107,  101,  101,   99,   99,  676,  676,  676,
      125,  676,  676,  125,  676,  676,  125,  676,  676,  125,

      517,  518,  125,  237,  242,  125,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,  125,  125,  125,  567,  519,  676,  565,  566,  125,
      125,  125,  676,  676,  131,  569,  125,  125,  125,  676,
      676,  676,  676,  568,  132,  676,   92,   92,   92,  676,
      676,  676,  567,  133,  519,  218,  565,  566,  125,  618,
      125,  125,  125,  131,  569,  599,  125,  247,  125,  125,
      125,  568,  132,  125,   92,   92,   92,  125,  125,  125,
      144,  133,  145,  218,  125,  125,  125,  127,  618,  603,

      181,  146,  604,  599,  182,  247,  676,  125,  633,  128,
      622,  676,  129,  676,  130,  125,  676,  623,  144,  220,
      145,  125,  125,  125,  125,  676,  127,  603,  181,  146,
      604,  125,  182,  125,  125,  125,  633,  128,  676,  622,
      129,  676,  130,  125,  125,  125,  623,  220,  223,  125,
      125,  125,  134,  676,  676,  135,  676,  248,  125,  136,
      676,  676,  676,  137,  676,  676,  138,  125,  125,  125,
      125,  139,  125,  125,  125,  233,  223,  676,  234,  676,
      125,  134,  676,  676,  135,  248,  125,  676,  136,  676,
      676,  137,  224,  225,  138,  676,  676,  230,  676,  139,

      125,  125,  125,  233,  125,  676,  234,  676,  676,  125,
      125,  125,  125,  140,  676,  676,  676,  141,  676,  676,
      224,  225,  676,  142,  231,  230,  676,  676,  676,  125,
      125,  125,  143,  676,  676,  676,  232,  125,  676,  125,
      125,  125,  140,  676,  676,  676,  141,  125,  676,  676,
      676,  142,  676,  231,  676,  676,  676,  235,  676,  236,
      143,  125,  125,  125,  232,  238,  125,  125,  125,  125,
      147,  676,  676,  676,  676,  676,  125,  266,  148,  125,
      125,  125,  676,  676,  149,  235,  676,  236,  676,  150,
      125,  125,  125,  238,  125,  125,  125,  676,  125,  147,

      676,  246,  676,  676,  125,  240,  266,  148,  125,  125,
      125,  676,  149,  676,  676,  245,  125,  150,  125,  125,
      125,  241,  125,  125,  125,  676,  676,  125,  243,  246,
      244,  125,  152,  676,  240,  676,  676,  676,  676,  153,
      154,  676,  676,  245,  155,  125,  676,  676,  255,  241,
      676,  125,  125,  125,  676,  125,  243,  676,  244,  125,
      676,  152,  125,  125,  125,  272,  676,  153,  154,  125,
      125,  125,  155,  125,  125,  125,  255,  125,  125,  125,
      676,  125,  125,  125,  254,  676,  676,  162,  125,  257,
      260,  676,  676,  258,  272,  163,  676,  676,  164,  125,

      676,  676,  165,  676,  676,  676,  125,  676,  259,  676,
      125,  676,  254,  676,  125,  676,  162,  257,  125,  260,
      676,  676,  258,  163,  676,  676,  164,  125,  125,  125,
      165,  125,  125,  125,  676,  676,  259,  676,  261,  676,
      171,  125,  125,  125,  172,  676,  676,  173,  174,  676,
      278,  676,  175,  262,  125,  125,  125,  676,  176,  125,
      125,  125,  676,  676,  125,  263,  676,  261,  125,  171,
      125,  125,  125,  172,  676,  676,  173,  174,  125,  278,
      175,  262,  676,  125,  125,  125,  176,  125,  125,  125,
      676,  125,  676,  676,  263,  676,  125,  273,  676,  676,

      264,  676,  676,  177,  676,  676,  265,  125,  676,  676,
      178,  676,  179,  676,  676,  676,  676,  676,  676,  180,
      125,  125,  125,  125,  125,  273,  125,  125,  125,  264,
      676,  676,  177,  676,  265,  676,  676,  676,  178,  289,
      179,  274,  676,  676,  275,  676,  276,  180,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  676,  125,  676,
      249,  676,  676,  125,  250,  251,  676,  282,  289,  274,
      676,  676,  275,  277,  276,  252,  676,  676,  676,  283,
      125,  125,  125,  676,  676,  125,  676,  676,  125,  249,
      676,  125,  676,  250,  251,  676,  282,  125,  125,  125,

      676,  277,  676,  252,  125,  125,  125,  283,  125,  125,
      125,  676,  676,  267,  676,  268,  676,  125,  676,  269,
      279,  270,  676,  676,  676,  284,  676,  676,  271,  285,
      676,  280,  676,  281,  125,  676,  125,  125,  125,  676,
      676,  125,  267,  676,  268,  125,  676,  676,  269,  279,
      270,  676,  676,  284,  676,  676,  271,  285,  676,  280,
      286,  281,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  676,  676,  125,  125,  125,  125,  676,  676,  287,
      676,  676,  125,  125,  125,  125,  125,  125,  286,  288,
      290,  292,  676,  291,  676,  125,  125,  125,  676,  125,

      676,  676,  125,  676,  676,  125,  676,  293,  287,  676,
      295,  125,  294,  125,  125,  125,  676,  288,  290,  125,
      292,  291,  125,  676,  125,  125,  125,  676,  125,  125,
      125,  676,  125,  310,  676,  293,  308,  676,  295,  676,
      309,  294,  125,  125,  125,  311,  125,  125,  125,  676,
      125,  125,  125,  125,  676,  313,  125,  125,  125,  676,
      676,  125,  310,  314,  308,  125,  312,  676,  309,  315,
      125,  125,  125,  676,  311,  125,  125,  125,  676,  125,
      676,  316,  676,  125,  313,  125,  125,  125,  125,  125,
      125,  125,  314,  125,  312,  125,  125,  125,  315,  676,

      317,  125,  125,  125,  125,  125,  125,  125,  676,  676,
      316,  318,  125,  321,  676,  319,  676,  125,  125,  125,
      320,  676,  125,  676,  676,  323,  125,  676,  317,  125,
      125,  125,  125,  125,  125,  125,  676,  676,  125,  318,
      676,  125,  321,  319,  322,  125,  125,  125,  320,  676,
      676,  325,  676,  323,  125,  324,  125,  125,  125,  676,
      125,  125,  125,  676,  676,  326,  125,  125,  125,  125,
      125,  676,  322,  327,  125,  125,  125,  676,  676,  325,
      328,  676,  125,  676,  324,  676,  676,  329,  125,  125,
      125,  676,  676,  125,  326,  676,  676,  125,  676,  125,

      125,  125,  327,  676,  125,  676,  125,  125,  125,  328,
      676,  125,  331,  676,  330,  332,  329,  125,  125,  125,
      125,  125,  125,  676,  676,  125,  125,  125,  125,  676,
      676,  333,  125,  125,  125,  334,  125,  125,  125,  125,
      676,  331,  330,  125,  332,  125,  125,  125,  676,  676,
      336,  676,  335,  676,  125,  676,  676,  125,  337,  676,
      333,  676,  676,  125,  334,  125,  125,  125,  676,  125,
      125,  125,  339,  676,  125,  676,  125,  125,  125,  336,
      335,  676,  125,  340,  676,  341,  676,  337,  125,  125,
      125,  676,  338,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  342,  125,  125,  125,  125,  125,  125,
      125,  676,  340,  125,  341,  676,  676,  344,  676,  343,
      338,  125,  125,  125,  676,  125,  125,  125,  125,  676,
      125,  676,  342,  125,  676,  676,  125,  125,  125,  125,
      346,  125,  676,  676,  676,  125,  344,  343,  347,  676,
      676,  345,  125,  125,  125,  125,  125,  125,  125,  676,
      125,  125,  125,  125,  676,  348,  676,  676,  346,  676,
      676,  125,  125,  125,  125,  676,  676,  347,  676,  345,
      125,  125,  125,  355,  349,  676,  350,  676,  676,  125,
      676,  676,  125,  676,  348,  351,  676,  125,  352,  676,

      353,  125,  125,  125,  125,  125,  125,  676,  125,  676,
      676,  355,  349,  354,  676,  350,  676,  125,  125,  125,
      125,  356,  676,  351,  676,  676,  352,  676,  353,  676,
      125,  125,  125,  125,  125,  125,  676,  676,  125,  676,
      357,  125,  354,  358,  676,  676,  359,  125,  125,  125,
      356,  125,  125,  125,  676,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  676,  676,  125,  357,  676,
      125,  676,  358,  676,  676,  359,  676,  361,  125,  125,
      125,  360,  676,  676,  125,  125,  125,  125,  125,  676,
      125,  125,  125,  125,  676,  676,  125,  676,  362,  125,

      676,  363,  125,  125,  125,  676,  361,  676,  676,  360,
      364,  676,  125,  125,  125,  125,  125,  125,  125,  365,
      676,  676,  125,  125,  125,  125,  362,  125,  676,  367,
      363,  125,  125,  125,  366,  676,  368,  676,  364,  125,
      676,  125,  125,  125,  125,  125,  125,  676,  365,  125,
      125,  125,  125,  125,  369,  125,  125,  125,  367,  676,
      125,  676,  366,  676,  676,  368,  676,  371,  125,  676,
      676,  370,  125,  125,  125,  125,  125,  125,  125,  676,
      676,  125,  676,  369,  125,  125,  125,  125,  125,  125,
      125,  676,  125,  676,  676,  676,  371,  676,  372,  370,

      375,  676,  373,  676,  374,  676,  125,  125,  125,  125,
      676,  676,  125,  125,  125,  125,  125,  125,  125,  676,
      676,  125,  125,  125,  125,  125,  372,  676,  676,  375,
      373,  676,  374,  376,  676,  676,  389,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  390,  676,  676,
      125,  676,  676,  125,  125,  125,  125,  393,  676,  125,
      676,  376,  392,  676,  389,  125,  125,  125,  676,  391,
      125,  125,  125,  676,  125,  390,  676,  125,  125,  125,
      125,  125,  394,  125,  125,  125,  393,  125,  125,  125,
      392,  125,  125,  125,  125,  676,  676,  391,  395,  125,

      125,  125,  125,  125,  125,  125,  676,  125,  676,  676,
      676,  394,  676,  396,  676,  125,  398,  676,  676,  397,
      125,  125,  125,  125,  125,  676,  395,  399,  676,  125,
      676,  125,  125,  125,  676,  676,  125,  676,  676,  676,
      125,  396,  125,  125,  125,  398,  400,  397,  401,  125,
      125,  125,  125,  125,  125,  399,  676,  676,  125,  125,
      125,  125,  402,  125,  125,  125,  676,  676,  125,  125,
      125,  125,  676,  404,  400,  676,  403,  401,  676,  125,
      125,  125,  125,  125,  125,  125,  125,  405,  676,  125,
      402,  406,  676,  407,  676,  676,  125,  125,  125,  125,

      125,  404,  676,  676,  403,  676,  125,  125,  125,  125,
      125,  125,  125,  676,  676,  405,  676,  125,  676,  406,
      125,  676,  407,  676,  409,  676,  676,  408,  125,  125,
      125,  676,  410,  676,  125,  125,  125,  125,  125,  125,
      125,  411,  676,  676,  125,  676,  676,  125,  125,  125,
      125,  676,  409,  676,  676,  408,  125,  125,  125,  676,
      410,  431,  676,  413,  676,  125,  412,  125,  125,  125,
      411,  676,  125,  414,  676,  125,  125,  125,  125,  125,
      125,  125,  416,  676,  676,  125,  125,  125,  125,  676,
      431,  413,  417,  125,  412,  421,  419,  676,  125,  125,

      125,  418,  414,  676,  125,  676,  125,  125,  125,  420,
      676,  416,  422,  125,  676,  676,  125,  676,  676,  676,
      417,  676,  676,  125,  421,  419,  423,  676,  676,  418,
      676,  424,  676,  676,  676,  125,  676,  420,  125,  125,
      125,  422,  676,  125,  125,  125,  125,  425,  125,  125,
      125,  426,  676,  427,  423,  125,  125,  125,  676,  424,
      428,  125,  125,  125,  429,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  676,  125,  425,  676,  432,  676,
      426,  125,  427,  676,  676,  125,  430,  676,  433,  428,
      676,  434,  125,  429,  676,  125,  125,  125,  125,  125,

      125,  125,  125,  676,  676,  125,  676,  432,  125,  676,
      125,  125,  125,  676,  430,  676,  676,  433,  676,  434,
      435,  125,  125,  125,  676,  436,  676,  125,  125,  125,
      438,  676,  125,  125,  125,  125,  125,  437,  439,  676,
      676,  125,  125,  125,  125,  125,  125,  125,  435,  125,
      125,  125,  676,  436,  125,  125,  125,  676,  125,  438,
      440,  441,  676,  443,  125,  437,  445,  439,  676,  442,
      125,  125,  125,  125,  125,  125,  125,  676,  125,  676,
      676,  125,  676,  676,  444,  676,  125,  676,  440,  441,
      676,  125,  443,  676,  445,  676,  676,  442,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  446,  125,  676,
      676,  125,  676,  444,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  676,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  676,  676,  125,  446,  447,  125,  676,
      449,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  448,  676,  125,  450,  676,  125,  125,  125,
      125,  125,  676,  676,  125,  447,  676,  125,  676,  449,
      125,  125,  125,  458,  125,  125,  125,  676,  676,  125,
      448,  676,  125,  459,  450,  125,  676,  125,  125,  125,
      676,  676,  461,  676,  676,  125,  460,  125,  125,  125,

      676,  458,  125,  125,  125,  676,  676,  125,  125,  125,
      125,  125,  459,  125,  125,  125,  125,  125,  125,  676,
      461,  125,  125,  125,  125,  460,  676,  676,  676,  125,
      125,  125,  676,  462,  125,  463,  464,  676,  676,  125,
      676,  466,  676,  676,  676,  125,  125,  125,  125,  465,
      125,  467,  676,  125,  676,  125,  125,  125,  125,  468,
      676,  462,  676,  463,  464,  676,  125,  125,  125,  125,
      466,  125,  125,  125,  125,  125,  125,  465,  469,  467,
      125,  125,  125,  125,  470,  676,  472,  676,  468,  676,
      676,  676,  125,  125,  125,  125,  676,  676,  471,  125,

      125,  125,  676,  676,  125,  676,  469,  676,  125,  676,
      475,  125,  676,  470,  676,  472,  473,  125,  676,  474,
      125,  125,  125,  125,  125,  125,  471,  125,  125,  125,
      125,  676,  125,  125,  125,  676,  125,  676,  676,  475,
      125,  125,  125,  676,  477,  473,  676,  474,  476,  478,
      125,  125,  125,  480,  125,  125,  125,  125,  676,  479,
      125,  125,  125,  125,  125,  676,  676,  676,  481,  125,
      676,  676,  477,  125,  125,  125,  476,  125,  478,  125,
      125,  125,  480,  125,  125,  125,  676,  125,  479,  676,
      676,  125,  676,  482,  676,  483,  676,  481,  125,  125,

      125,  125,  484,  125,  125,  125,  487,  125,  125,  125,
      125,  676,  486,  676,  485,  676,  125,  125,  125,  125,
      125,  482,  676,  483,  488,  125,  125,  125,  676,  676,
      484,  676,  489,  676,  487,  676,  125,  490,  676,  676,
      125,  486,  676,  485,  125,  125,  125,  125,  125,  125,
      125,  676,  676,  488,  125,  676,  676,  125,  125,  125,
      676,  489,  125,  676,  676,  491,  490,  676,  125,  125,
      125,  125,  125,  125,  676,  676,  492,  494,  125,  125,
      125,  676,  125,  676,  493,  125,  125,  125,  125,  496,
      125,  125,  125,  491,  125,  676,  495,  125,  125,  125,

      676,  497,  676,  676,  492,  125,  494,  676,  125,  125,
      125,  125,  493,  501,  676,  125,  498,  676,  496,  499,
      676,  500,  676,  125,  495,  676,  676,  125,  676,  676,
      497,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  501,  676,  676,  498,  676,  125,  499,  676,  676,
      500,  125,  125,  125,  676,  676,  502,  125,  125,  125,
      504,  676,  503,  125,  125,  125,  676,  676,  125,  125,
      125,  125,  125,  676,  505,  125,  506,  125,  125,  125,
      125,  125,  125,  676,  502,  676,  507,  676,  125,  504,
      503,  676,  509,  676,  125,  676,  676,  508,  676,  676,

      125,  676,  676,  505,  676,  506,  125,  125,  125,  125,
      676,  125,  125,  125,  125,  507,  676,  125,  125,  125,
      125,  509,  510,  511,  676,  508,  676,  512,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  676,  125,  125,
      125,  676,  676,  676,  125,  676,  676,  676,  125,  521,
      676,  510,  511,  676,  513,  125,  512,  125,  125,  125,
      676,  520,  125,  125,  125,  125,  676,  676,  125,  676,
      676,  125,  125,  125,  125,  125,  676,  676,  521,  522,
      676,  523,  513,  676,  125,  125,  125,  676,  676,  520,
      524,  125,  125,  125,  125,  525,  125,  125,  125,  125,

      676,  676,  527,  125,  125,  125,  676,  522,  676,  125,
      523,  125,  125,  125,  676,  125,  125,  125,  524,  676,
      676,  125,  676,  526,  525,  125,  125,  125,  125,  676,
      676,  527,  676,  125,  125,  125,  125,  676,  528,  676,
      125,  125,  125,  125,  676,  529,  676,  676,  125,  676,
      676,  526,  125,  676,  125,  125,  125,  125,  125,  125,
      676,  676,  125,  125,  125,  125,  528,  530,  125,  125,
      125,  125,  676,  676,  529,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  676,  676,  676,  676,  534,
      531,  125,  535,  676,  125,  532,  530,  676,  533,  676,

      125,  676,  125,  125,  125,  125,  125,  125,  125,  536,
      676,  676,  125,  676,  676,  676,  125,  534,  531,  125,
      676,  535,  537,  532,  676,  676,  533,  125,  125,  125,
      676,  538,  125,  125,  125,  676,  539,  536,  676,  125,
      125,  125,  125,  125,  676,  125,  125,  125,  676,  676,
      537,  125,  125,  125,  676,  125,  125,  125,  676,  538,
      676,  676,  676,  676,  125,  539,  676,  540,  542,  125,
      541,  125,  125,  125,  125,  125,  125,  125,  676,  543,
      544,  676,  125,  125,  125,  125,  545,  676,  125,  125,
      125,  125,  125,  676,  676,  540,  546,  542,  541,  125,

      125,  125,  125,  125,  125,  676,  676,  543,  125,  544,
      676,  125,  125,  125,  125,  545,  125,  125,  125,  676,
      125,  676,  125,  125,  125,  546,  125,  547,  676,  548,
      125,  125,  125,  549,  676,  676,  125,  676,  676,  125,
      676,  125,  125,  125,  125,  125,  125,  676,  676,  125,
      125,  125,  125,  125,  676,  547,  676,  550,  548,  125,
      552,  549,  125,  125,  125,  676,  676,  125,  551,  676,
      553,  125,  125,  125,  125,  125,  125,  676,  125,  676,
      676,  125,  676,  676,  554,  550,  676,  125,  676,  552,
      125,  125,  125,  125,  125,  125,  551,  555,  553,  125,

      125,  125,  125,  125,  125,  125,  676,  676,  125,  676,
      676,  125,  676,  554,  676,  557,  125,  125,  125,  676,
      556,  125,  125,  125,  676,  555,  676,  125,  676,  676,
      125,  125,  125,  125,  125,  125,  125,  125,  558,  676,
      125,  559,  676,  557,  125,  125,  125,  676,  556,  676,
      125,  125,  125,  125,  125,  125,  125,  676,  125,  125,
      125,  125,  125,  125,  125,  676,  558,  676,  125,  559,
      562,  560,  676,  561,  676,  676,  563,  125,  125,  125,
      676,  125,  676,  125,  125,  125,  676,  125,  676,  571,
      570,  125,  125,  125,  125,  676,  125,  676,  562,  125,

      676,  561,  676,  572,  563,  125,  125,  125,  676,  125,
      125,  125,  676,  676,  125,  676,  573,  571,  676,  570,
      125,  125,  125,  125,  574,  125,  125,  125,  676,  125,
      676,  572,  125,  125,  125,  125,  125,  125,  576,  676,
      676,  676,  125,  676,  578,  573,  125,  676,  575,  125,
      125,  125,  574,  676,  125,  125,  125,  676,  125,  676,
      676,  577,  125,  125,  125,  125,  676,  576,  676,  125,
      676,  676,  125,  578,  676,  676,  575,  125,  125,  125,
      125,  125,  125,  676,  676,  579,  125,  580,  676,  676,
      577,  125,  125,  125,  125,  125,  125,  125,  676,  676,

      125,  676,  581,  676,  676,  582,  125,  125,  125,  125,
      125,  125,  583,  579,  125,  676,  580,  125,  676,  676,
      584,  125,  125,  125,  125,  125,  125,  676,  676,  125,
      581,  676,  125,  676,  582,  676,  585,  125,  125,  125,
      676,  583,  676,  125,  676,  676,  125,  676,  676,  584,
      125,  125,  125,  676,  125,  125,  125,  676,  125,  676,
      676,  125,  125,  125,  125,  585,  587,  676,  676,  676,
      586,  125,  125,  125,  125,  588,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  676,  676,  125,  676,  589,
      676,  125,  125,  125,  125,  587,  676,  676,  586,  125,

      676,  125,  125,  125,  588,  125,  125,  125,  125,  125,
      125,  125,  676,  125,  591,  676,  125,  676,  589,  125,
      676,  676,  592,  676,  590,  125,  125,  125,  676,  125,
      676,  676,  125,  125,  125,  676,  676,  593,  125,  125,
      125,  125,  125,  591,  595,  676,  125,  125,  125,  125,
      594,  592,  590,  125,  125,  125,  125,  125,  125,  596,
      676,  676,  125,  676,  676,  593,  125,  125,  125,  125,
      125,  125,  125,  595,  597,  600,  125,  676,  594,  676,
      598,  125,  125,  125,  125,  676,  676,  596,  676,  676,
      125,  676,  676,  125,  125,  125,  125,  125,  125,  125,

      676,  601,  597,  125,  600,  676,  676,  125,  598,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  676,  601,
      676,  125,  676,  676,  125,  676,  125,  125,  125,  605,
      676,  676,  606,  125,  125,  125,  125,  607,  676,  125,
      676,  676,  125,  125,  125,  125,  125,  676,  676,  125,
      676,  676,  125,  608,  676,  676,  609,  605,  676,  676,
      606,  676,  676,  125,  676,  607,  125,  125,  125,  676,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  608,  676,  611,  676,  609,  125,  125,  125,  676,

      613,  676,  676,  610,  676,  125,  125,  125,  676,  125,
      125,  125,  676,  125,  125,  125,  125,  612,  125,  676,
      676,  125,  611,  676,  125,  125,  125,  125,  676,  613,
      676,  610,  614,  125,  125,  125,  125,  125,  125,  125,
      676,  676,  125,  676,  676,  612,  125,  676,  676,  615,
      676,  125,  125,  125,  125,  125,  125,  125,  676,  676,
      614,  676,  125,  676,  616,  125,  125,  125,  125,  125,
      125,  125,  676,  676,  125,  125,  125,  125,  615,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  676,  125,
      676,  676,  125,  616,  676,  676,  617,  125,  125,  125,

      676,  676,  125,  676,  676,  125,  676,  125,  125,  125,
      619,  676,  125,  676,  676,  676,  125,  676,  676,  125,
      676,  676,  125,  676,  617,  125,  125,  125,  676,  620,
      624,  125,  125,  125,  125,  125,  125,  125,  619,  125,
      125,  125,  676,  676,  125,  626,  676,  125,  125,  125,
      625,  676,  627,  125,  125,  125,  629,  620,  624,  125,
      125,  125,  125,  676,  628,  125,  125,  125,  125,  125,
      125,  125,  125,  630,  626,  676,  125,  676,  625,  676,
      676,  627,  676,  676,  125,  629,  125,  125,  125,  676,
      125,  676,  628,  676,  676,  631,  125,  125,  125,  125,

      676,  630,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  676,  632,  676,  125,  125,  125,  125,
      125,  125,  676,  125,  631,  676,  125,  125,  125,  125,
      125,  125,  676,  676,  125,  638,  125,  125,  125,  676,
      125,  637,  676,  632,  125,  676,  676,  125,  125,  125,
      125,  676,  639,  125,  676,  676,  125,  125,  125,  125,
      125,  125,  125,  125,  638,  676,  125,  676,  676,  637,
      125,  125,  125,  125,  676,  640,  125,  125,  125,  676,
      639,  676,  676,  642,  676,  125,  676,  641,  125,  125,
      125,  676,  676,  676,  125,  676,  676,  125,  676,  644,

      125,  125,  125,  640,  125,  125,  125,  125,  676,  125,
      125,  125,  642,  125,  676,  641,  125,  125,  125,  125,
      125,  125,  645,  676,  676,  125,  646,  676,  644,  125,
      125,  125,  649,  647,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  676,  125,  125,  125,  125,
      645,  676,  676,  125,  676,  646,  125,  650,  125,  125,
      125,  649,  647,  676,  676,  651,  125,  676,  676,  653,
      676,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      654,  676,  676,  676,  125,  650,  676,  676,  676,  676,
      676,  676,  676,  651,  676,  125,  676,  653,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  654,  125,
      676,  676,  676,  125,   83,   83,   83,   83,   86,   86,
       86,   86,   89,   89,   89,   89,   92,   92,   92,   92,
       96,   96,   96,   96,   98,   98,   98,   98,  100,  100,
      100,  100,  109,  109,  109,  109,  196,  196,  199,  199,
      210,  676,  210,  211,  211,  211,  211,  214,  214,  214,
      214,  216,  216,  216,  216,  195,  195,  198,  198,  209,
      676,  209,   45,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676
    } ;

static yyconst flex_int16_t yy_chk[4452] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        5,    6,    7,    3,    4,    5,    6,    8,   19,   20,
       57,   57,  696,   31,   31,   31,   32,   32,   32,   54,

      102,   19,   20,   31,   54,   31,   32,   53,   32,   53,
       53,   53,   55,   93,   55,   55,   55,   19,   20,   66,
       66,   66,   31,   31,   31,   32,   32,   32,  102,   19,
       20,   31,  113,   31,   32,   96,   32,   96,   96,   96,
      113,   98,   93,   98,   98,   98,  213,  306,   67,   67,
       67,  100,  100,  100,  213,  306,   66,    7,  693,  688,
       94,   67,    8,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   67,   69,   69,   69,   94,
       67,   74,   74,   74,  105,   95,   97,  103,  104,  685,

      674,  106,  192,   69,   74,  108,  108,  108,  202,   69,
       21,   21,   21,  109,  201,  201,  201,  109,  109,  109,
      673,  672,  105,   69,   95,   97,  103,  104,   74,  106,
      192,  671,   69,   74,  670,  669,  202,   69,   21,   21,
       21,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   70,   70,   70,   73,  116,  193,  116,
      116,  116,  194,  197,   73,  117,   70,  117,  117,  117,
       73,  204,   73,  203,  207,   73,   70,  206,   22,   22,
       22,  207,  207,  207,  668,   73,  387,  193,  667,  666,

       70,  194,  197,   73,  387,   70,  665,  664,   73,  204,
       73,  663,  203,   73,   70,  206,   22,   22,   22,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   71,   71,   71,   78,   78,   78,  126,  126,  126,
      205,  297,  662,   78,  130,  130,  130,  298,   71,  661,
      299,   78,  660,  659,   71,  300,   23,   23,   23,  196,
      210,  196,  196,  196,  210,  210,  210,  658,   71,  205,
      297,   78,   78,  657,  126,  298,  656,   71,  299,  655,
       78,  130,   71,  300,   23,   23,   23,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   79,
       80,   80,   80,  131,  131,  131,   79,  301,   79,  128,
      128,  128,  152,  152,  152,   79,  302,  386,  131,  303,
      652,  128,  648,   80,   24,   24,   24,  199,   79,  199,
      199,  199,  643,  634,   79,  301,   79,   80,  623,  622,
      131,  621,  602,   79,  302,  386,  128,  131,  303,  152,
      128,   80,   24,   24,   24,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,  132,  132,  132,

      135,  135,  135,  136,  136,  136,  137,  137,  137,  155,
      155,  155,  136,  135,  564,  137,  304,  514,  305,  451,
      132,  453,   27,   27,   27,  377,  339,  307,  296,  216,
      214,  211,  209,  208,  132,  189,  119,  135,  115,  112,
      136,  136,  135,  137,  137,  304,  155,  305,  132,  453,
       27,   27,   27,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  138,  138,  138,  145,  145,
      145,  156,  156,  156,  379,  380,  159,  159,  159,  454,
      145,  156,  381,  382,  111,  385,   88,  138,  159,   85,

       28,   28,   28,   81,   59,   58,   56,   51,   50,   49,
       48,   47,  138,  379,  380,  145,   45,  454,  156,  145,
      156,  381,  382,  159,  385,  138,   42,  159,   28,   28,
       28,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,  143,  143,  143,  147,  147,  147,  162,
      162,  162,  163,  163,  163,  164,  164,  164,  178,  178,
      178,  455,  456,   41,   36,  143,  147,   35,   39,   39,
       39,   34,   33,   30,   29,   26,   25,    0,    0,    0,
      143,    0,    0,  147,    0,    0,  162,    0,    0,  163,

      455,  456,  164,  143,  147,  178,   39,   39,   39,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   61,   61,   61,  517,  457,    0,  515,  516,  127,
      127,  127,    0,    0,   61,  519,  151,  151,  151,    0,
        0,    0,    0,  518,   61,    0,   40,   40,   40,    0,
        0,    0,  517,   61,  457,  127,  515,  516,   61,  599,
       64,   64,   64,   61,  519,  560,  127,  151,   77,   77,
       77,  518,   61,  151,   40,   40,   40,   60,   60,   60,
       64,   61,   64,  127,  129,  129,  129,   60,  599,  565,

       77,   64,  566,  560,   77,  151,    0,   64,  618,   60,
      603,    0,   60,    0,   60,   77,    0,  604,   64,  129,
       64,  133,  133,  133,   60,    0,   60,  565,   77,   64,
      566,  129,   77,  153,  153,  153,  618,   60,    0,  603,
       60,    0,   60,   62,   62,   62,  604,  129,  133,  141,
      141,  141,   62,    0,    0,   62,    0,  153,  133,   62,
        0,    0,    0,   62,    0,    0,   62,  134,  134,  134,
      153,   62,  139,  139,  139,  141,  133,    0,  141,    0,
       62,   62,    0,    0,   62,  153,  141,    0,   62,    0,
        0,   62,  134,  134,   62,    0,    0,  139,    0,   62,

       63,   63,   63,  141,  134,    0,  141,    0,    0,  139,
      140,  140,  140,   63,    0,    0,    0,   63,    0,    0,
      134,  134,    0,   63,  140,  139,    0,    0,    0,  142,
      142,  142,   63,    0,    0,    0,  140,   63,    0,  144,
      144,  144,   63,    0,    0,    0,   63,  140,    0,    0,
        0,   63,    0,  140,    0,    0,    0,  142,    0,  142,
       63,   65,   65,   65,  140,  144,  142,  169,  169,  169,
       65,    0,    0,    0,    0,    0,  144,  169,   65,  150,
      150,  150,    0,    0,   65,  142,    0,  142,    0,   65,
      149,  149,  149,  144,  146,  146,  146,    0,   65,   65,

        0,  150,    0,    0,  169,  146,  169,   65,  148,  148,
      148,    0,   65,    0,    0,  149,  150,   65,   68,   68,
       68,  146,  158,  158,  158,    0,    0,  149,  148,  150,
      148,  146,   68,    0,  146,    0,    0,    0,    0,   68,
       68,    0,    0,  149,   68,  148,    0,    0,  158,  146,
        0,  171,  171,  171,    0,   68,  148,    0,  148,  158,
        0,   68,  157,  157,  157,  171,    0,   68,   68,  160,
      160,  160,   68,   72,   72,   72,  158,  165,  165,  165,
        0,  161,  161,  161,  157,    0,    0,   72,  171,  160,
      165,    0,    0,  161,  171,   72,    0,    0,   72,  157,

        0,    0,   72,    0,    0,    0,  160,    0,  161,    0,
       72,    0,  157,    0,  165,    0,   72,  160,  161,  165,
        0,    0,  161,   72,    0,    0,   72,  166,  166,  166,
       72,   75,   75,   75,    0,    0,  161,    0,  166,    0,
       75,  175,  175,  175,   75,    0,    0,   75,   75,    0,
      175,    0,   75,  166,  167,  167,  167,    0,   75,  219,
      219,  219,    0,    0,  166,  167,    0,  166,   75,   75,
      172,  172,  172,   75,    0,    0,   75,   75,  175,  175,
       75,  166,    0,  168,  168,  168,   75,   76,   76,   76,
        0,  167,    0,    0,  167,    0,  219,  172,    0,    0,

      168,    0,    0,   76,    0,    0,  168,  172,    0,    0,
       76,    0,   76,    0,    0,    0,    0,    0,    0,   76,
      168,  173,  173,  173,   76,  172,  182,  182,  182,  168,
        0,    0,   76,    0,  168,    0,    0,    0,   76,  182,
       76,  173,    0,    0,  173,    0,  173,   76,  154,  154,
      154,  174,  174,  174,  177,  177,  177,    0,  173,    0,
      154,    0,    0,  182,  154,  154,    0,  177,  182,  173,
        0,    0,  173,  174,  173,  154,    0,    0,    0,  177,
      234,  234,  234,    0,    0,  154,    0,    0,  174,  154,
        0,  177,    0,  154,  154,    0,  177,  179,  179,  179,

        0,  174,    0,  154,  170,  170,  170,  177,  176,  176,
      176,    0,    0,  170,    0,  170,    0,  234,    0,  170,
      176,  170,    0,    0,    0,  179,    0,    0,  170,  179,
        0,  176,    0,  176,  179,    0,  180,  180,  180,    0,
        0,  170,  170,    0,  170,  176,    0,    0,  170,  176,
      170,    0,    0,  179,    0,    0,  170,  179,    0,  176,
      180,  176,  181,  181,  181,  183,  183,  183,  184,  184,
      184,    0,    0,  180,  185,  185,  185,    0,    0,  181,
        0,    0,  186,  186,  186,  188,  188,  188,  180,  181,
      183,  185,    0,  184,    0,  187,  187,  187,    0,  181,

        0,    0,  183,    0,    0,  184,    0,  186,  181,    0,
      188,  185,  187,  218,  218,  218,    0,  181,  183,  186,
      185,  184,  188,    0,  220,  220,  220,    0,  221,  221,
      221,    0,  187,  220,    0,  186,  218,    0,  188,    0,
      218,  187,  223,  223,  223,  221,  222,  222,  222,    0,
      218,  224,  224,  224,    0,  223,  225,  225,  225,    0,
        0,  220,  220,  224,  218,  221,  222,    0,  218,  225,
      226,  226,  226,    0,  221,  227,  227,  227,    0,  223,
        0,  226,    0,  222,  223,  228,  228,  228,  224,  229,
      229,  229,  224,  225,  222,  230,  230,  230,  225,    0,

      227,  233,  233,  233,  231,  231,  231,  226,    0,    0,
      226,  228,  227,  231,    0,  229,    0,  232,  232,  232,
      230,    0,  228,    0,    0,  233,  229,    0,  227,  236,
      236,  236,  230,  239,  239,  239,    0,    0,  233,  228,
        0,  231,  231,  229,  232,  235,  235,  235,  230,    0,
        0,  236,    0,  233,  232,  235,  237,  237,  237,    0,
      238,  238,  238,    0,    0,  237,  236,  240,  240,  240,
      239,    0,  232,  238,  241,  241,  241,    0,    0,  236,
      240,    0,  235,    0,  235,    0,    0,  241,  242,  242,
      242,    0,    0,  237,  237,    0,    0,  238,    0,  243,

      243,  243,  238,    0,  240,    0,  244,  244,  244,  240,
        0,  241,  243,    0,  242,  244,  241,  245,  245,  245,
      246,  246,  246,    0,    0,  242,  247,  247,  247,    0,
        0,  246,  248,  248,  248,  247,  243,  249,  249,  249,
        0,  243,  242,  244,  244,  250,  250,  250,    0,    0,
      249,    0,  248,    0,  245,    0,    0,  246,  250,    0,
      246,    0,    0,  247,  247,  251,  251,  251,    0,  248,
      252,  252,  252,    0,  249,    0,  253,  253,  253,  249,
      248,    0,  250,  252,    0,  253,    0,  250,  254,  254,
      254,    0,  251,  255,  255,  255,  256,  256,  256,  257,

      257,  257,  251,  254,  258,  258,  258,  252,  259,  259,
      259,    0,  252,  253,  253,    0,    0,  258,    0,  255,
      251,  261,  261,  261,    0,  254,  260,  260,  260,    0,
      255,    0,  254,  256,    0,    0,  257,  262,  262,  262,
      261,  258,    0,    0,    0,  259,  258,  255,  262,    0,
        0,  260,  263,  263,  263,  264,  264,  264,  261,    0,
      268,  268,  268,  260,    0,  263,    0,    0,  261,    0,
        0,  265,  265,  265,  262,    0,    0,  262,    0,  260,
      266,  266,  266,  268,  264,    0,  265,    0,    0,  263,
        0,    0,  264,    0,  263,  265,    0,  268,  265,    0,

      266,  267,  267,  267,  269,  269,  269,    0,  265,    0,
        0,  268,  264,  267,    0,  265,    0,  266,  270,  270,
      270,  269,    0,  265,    0,    0,  265,    0,  266,    0,
      271,  271,  271,  272,  272,  272,    0,    0,  267,    0,
      270,  269,  267,  271,    0,    0,  272,  273,  273,  273,
      269,  274,  274,  274,    0,  270,  275,  275,  275,  276,
      276,  276,  277,  277,  277,    0,    0,  271,  270,    0,
      272,    0,  271,    0,    0,  272,    0,  277,  278,  278,
      278,  275,    0,    0,  273,  280,  280,  280,  274,    0,
      279,  279,  279,  275,    0,    0,  276,    0,  278,  277,

        0,  279,  281,  281,  281,    0,  277,    0,    0,  275,
      280,    0,  282,  282,  282,  278,  283,  283,  283,  281,
        0,    0,  280,  284,  284,  284,  278,  279,    0,  283,
      279,  285,  285,  285,  282,    0,  284,    0,  280,  281,
        0,  286,  286,  286,  287,  287,  287,    0,  281,  282,
      288,  288,  288,  283,  286,  290,  290,  290,  283,    0,
      284,    0,  282,    0,    0,  284,    0,  288,  285,    0,
        0,  287,  289,  289,  289,  291,  291,  291,  286,    0,
        0,  287,    0,  286,  292,  292,  292,  288,  293,  293,
      293,    0,  290,    0,    0,    0,  288,    0,  289,  287,

      293,    0,  291,    0,  292,    0,  294,  294,  294,  289,
        0,    0,  291,  295,  295,  295,  308,  308,  308,    0,
        0,  292,  309,  309,  309,  293,  289,    0,    0,  293,
      291,    0,  292,  294,    0,    0,  308,  310,  310,  310,
      311,  311,  311,  294,  312,  312,  312,  309,    0,    0,
      295,    0,    0,  308,  313,  313,  313,  312,    0,  309,
        0,  294,  311,    0,  308,  314,  314,  314,    0,  310,
      315,  315,  315,    0,  310,  309,    0,  311,  316,  316,
      316,  312,  314,  317,  317,  317,  312,  318,  318,  318,
      311,  313,  319,  319,  319,    0,    0,  310,  316,  321,

      321,  321,  314,  320,  320,  320,    0,  315,    0,    0,
        0,  314,    0,  318,    0,  316,  320,    0,    0,  319,
      317,  322,  322,  322,  318,    0,  316,  321,    0,  319,
        0,  323,  323,  323,    0,    0,  321,    0,    0,    0,
      320,  318,  324,  324,  324,  320,  322,  319,  323,  325,
      325,  325,  326,  326,  326,  321,    0,    0,  322,  327,
      327,  327,  324,  328,  328,  328,    0,    0,  323,  329,
      329,  329,    0,  326,  322,    0,  325,  323,    0,  324,
      330,  330,  330,  331,  331,  331,  325,  328,    0,  326,
      324,  329,    0,  330,    0,    0,  327,  333,  333,  333,

      328,  326,    0,    0,  325,    0,  329,  332,  332,  332,
      334,  334,  334,    0,    0,  328,    0,  330,    0,  329,
      331,    0,  330,    0,  333,    0,    0,  332,  335,  335,
      335,    0,  334,    0,  333,  336,  336,  336,  337,  337,
      337,  335,    0,    0,  332,    0,    0,  334,  351,  351,
      351,    0,  333,    0,    0,  332,  338,  338,  338,    0,
      334,  351,    0,  337,    0,  335,  336,  340,  340,  340,
      335,    0,  336,  338,    0,  337,  341,  341,  341,  342,
      342,  342,  340,    0,    0,  351,  343,  343,  343,    0,
      351,  337,  340,  338,  336,  343,  342,    0,  344,  344,

      344,  341,  338,    0,  340,    0,  345,  345,  345,  342,
        0,  340,  344,  341,    0,    0,  342,    0,    0,    0,
      340,    0,    0,  343,  343,  342,  345,    0,    0,  341,
        0,  345,    0,    0,    0,  344,    0,  342,  346,  346,
      346,  344,    0,  345,  347,  347,  347,  346,  348,  348,
      348,  346,    0,  347,  345,  349,  349,  349,    0,  345,
      348,  350,  350,  350,  349,  352,  352,  352,  354,  354,
      354,  353,  353,  353,    0,  346,  346,    0,  352,    0,
      346,  347,  347,    0,    0,  348,  350,    0,  353,  348,
        0,  354,  349,  349,    0,  355,  355,  355,  350,  356,

      356,  356,  352,    0,    0,  354,    0,  352,  353,    0,
      357,  357,  357,    0,  350,    0,    0,  353,    0,  354,
      355,  358,  358,  358,    0,  356,    0,  359,  359,  359,
      358,    0,  355,  360,  360,  360,  356,  357,  359,    0,
        0,  361,  361,  361,  365,  365,  365,  357,  355,  362,
      362,  362,    0,  356,  363,  363,  363,    0,  358,  358,
      360,  361,    0,  363,  359,  357,  365,  359,    0,  362,
      360,  364,  364,  364,  366,  366,  366,    0,  361,    0,
        0,  365,    0,    0,  364,    0,  362,    0,  360,  361,
        0,  363,  363,    0,  365,    0,    0,  362,  367,  367,

      367,  368,  368,  368,  369,  369,  369,  367,  364,    0,
        0,  366,    0,  364,  370,  370,  370,  371,  371,  371,
      372,  372,  372,    0,  373,  373,  373,  374,  374,  374,
      375,  375,  375,    0,    0,  367,  367,  371,  368,    0,
      374,  369,  376,  376,  376,  389,  389,  389,  391,  391,
      391,  370,  373,    0,  371,  376,    0,  372,  392,  392,
      392,  373,    0,    0,  374,  371,    0,  375,    0,  374,
      394,  394,  394,  389,  390,  390,  390,    0,    0,  376,
      373,    0,  389,  390,  376,  391,    0,  393,  393,  393,
        0,    0,  394,    0,    0,  392,  393,  395,  395,  395,

        0,  389,  396,  396,  396,    0,    0,  394,  397,  397,
      397,  390,  390,  398,  398,  398,  399,  399,  399,    0,
      394,  400,  400,  400,  393,  393,    0,    0,    0,  401,
      401,  401,    0,  397,  395,  398,  399,    0,    0,  396,
        0,  401,    0,    0,    0,  397,  402,  402,  402,  400,
      398,  401,    0,  399,    0,  403,  403,  403,  400,  402,
        0,  397,    0,  398,  399,    0,  401,  404,  404,  404,
      401,  405,  405,  405,  406,  406,  406,  400,  403,  401,
      407,  407,  407,  402,  404,    0,  406,    0,  402,    0,
        0,    0,  403,  409,  409,  409,    0,    0,  405,  408,

      408,  408,    0,    0,  404,    0,  403,    0,  405,    0,
      409,  406,    0,  404,    0,  406,  408,  407,    0,  408,
      410,  410,  410,  411,  411,  411,  405,  412,  412,  412,
      409,    0,  413,  413,  413,    0,  408,    0,    0,  409,
      416,  416,  416,    0,  411,  408,    0,  408,  410,  413,
      414,  414,  414,  416,  417,  417,  417,  410,    0,  414,
      411,  418,  418,  418,  412,    0,    0,    0,  417,  413,
        0,    0,  411,  419,  419,  419,  410,  416,  413,  420,
      420,  420,  416,  423,  423,  423,    0,  414,  414,    0,
        0,  417,    0,  418,    0,  419,    0,  417,  418,  421,

      421,  421,  420,  422,  422,  422,  423,  424,  424,  424,
      419,    0,  422,    0,  421,    0,  420,  425,  425,  425,
      423,  418,    0,  419,  424,  426,  426,  426,    0,    0,
      420,    0,  425,    0,  423,    0,  421,  426,    0,    0,
      422,  422,    0,  421,  424,  427,  427,  427,  428,  428,
      428,    0,    0,  424,  425,    0,    0,  429,  429,  429,
        0,  425,  426,    0,    0,  427,  426,    0,  430,  430,
      430,  431,  431,  431,    0,    0,  428,  430,  432,  432,
      432,    0,  427,    0,  429,  428,  436,  436,  436,  432,
      433,  433,  433,  427,  429,    0,  431,  434,  434,  434,

        0,  433,    0,    0,  428,  430,  430,    0,  431,  435,
      435,  435,  429,  436,    0,  432,  433,    0,  432,  434,
        0,  435,    0,  436,  431,    0,    0,  433,    0,    0,
      433,  437,  437,  437,  434,  438,  438,  438,  447,  447,
      447,  436,    0,    0,  433,    0,  435,  434,    0,    0,
      435,  439,  439,  439,    0,    0,  437,  440,  440,  440,
      439,    0,  438,  441,  441,  441,    0,    0,  437,  442,
      442,  442,  438,    0,  440,  447,  441,  443,  443,  443,
      444,  444,  444,    0,  437,    0,  442,    0,  439,  439,
      438,    0,  444,    0,  440,    0,    0,  443,    0,    0,

      441,    0,    0,  440,    0,  441,  442,  445,  445,  445,
        0,  446,  446,  446,  443,  442,    0,  444,  448,  448,
      448,  444,  445,  446,    0,  443,    0,  448,  449,  449,
      449,  450,  450,  450,  458,  458,  458,    0,  459,  459,
      459,    0,    0,    0,  445,    0,    0,    0,  446,  459,
        0,  445,  446,    0,  450,  448,  448,  460,  460,  460,
        0,  458,  462,  462,  462,  449,    0,    0,  450,    0,
        0,  458,  461,  461,  461,  459,    0,    0,  459,  460,
        0,  461,  450,    0,  463,  463,  463,    0,    0,  458,
      462,  465,  465,  465,  460,  463,  464,  464,  464,  462,

        0,    0,  465,  466,  466,  466,    0,  460,    0,  461,
      461,  467,  467,  467,    0,  468,  468,  468,  462,    0,
        0,  463,    0,  464,  463,  469,  469,  469,  465,    0,
        0,  465,    0,  464,  470,  470,  470,    0,  467,    0,
      466,  471,  471,  471,    0,  470,    0,    0,  467,    0,
        0,  464,  468,    0,  472,  472,  472,  473,  473,  473,
        0,    0,  469,  474,  474,  474,  467,  472,  476,  476,
      476,  470,    0,    0,  470,  475,  475,  475,  471,  477,
      477,  477,  478,  478,  478,    0,    0,    0,    0,  476,
      473,  472,  477,    0,  473,  474,  472,    0,  475,    0,

      474,    0,  479,  479,  479,  476,  480,  480,  480,  478,
        0,    0,  475,    0,    0,    0,  477,  476,  473,  478,
        0,  477,  479,  474,    0,    0,  475,  481,  481,  481,
        0,  480,  482,  482,  482,    0,  481,  478,    0,  479,
      483,  483,  483,  480,    0,  484,  484,  484,    0,    0,
      479,  486,  486,  486,    0,  485,  485,  485,    0,  480,
        0,    0,    0,    0,  481,  481,    0,  483,  485,  482,
      484,  487,  487,  487,  488,  488,  488,  483,    0,  486,
      487,    0,  484,  489,  489,  489,  488,    0,  486,  490,
      490,  490,  485,    0,    0,  483,  489,  485,  484,  491,

      491,  491,  492,  492,  492,    0,    0,  486,  487,  487,
        0,  488,  494,  494,  494,  488,  493,  493,  493,    0,
      489,    0,  497,  497,  497,  489,  490,  492,    0,  493,
      495,  495,  495,  494,    0,    0,  491,    0,    0,  492,
        0,  496,  496,  496,  498,  498,  498,    0,    0,  494,
      499,  499,  499,  493,    0,  492,    0,  495,  493,  497,
      498,  494,  500,  500,  500,    0,    0,  495,  496,    0,
      499,  501,  501,  501,  502,  502,  502,    0,  496,    0,
        0,  498,    0,    0,  501,  495,    0,  499,    0,  498,
      503,  503,  503,  505,  505,  505,  496,  502,  499,  500,

      504,  504,  504,  506,  506,  506,    0,    0,  501,    0,
        0,  502,    0,  501,    0,  505,  507,  507,  507,    0,
      504,  508,  508,  508,    0,  502,    0,  503,    0,    0,
      505,  509,  509,  509,  510,  510,  510,  504,  507,    0,
      506,  508,    0,  505,  511,  511,  511,    0,  504,    0,
      512,  512,  512,  507,  513,  513,  513,    0,  508,  522,
      522,  522,  521,  521,  521,    0,  507,    0,  509,  508,
      512,  510,    0,  511,    0,    0,  513,  520,  520,  520,
        0,  511,    0,  523,  523,  523,    0,  512,    0,  521,
      520,  513,  525,  525,  525,    0,  522,    0,  512,  521,

        0,  511,    0,  523,  513,  524,  524,  524,    0,  526,
      526,  526,    0,    0,  520,    0,  524,  521,    0,  520,
      523,  527,  527,  527,  525,  528,  528,  528,    0,  525,
        0,  523,  529,  529,  529,  531,  531,  531,  528,    0,
        0,    0,  524,    0,  531,  524,  526,    0,  527,  530,
      530,  530,  525,    0,  532,  532,  532,    0,  527,    0,
        0,  530,  528,  533,  533,  533,    0,  528,    0,  529,
        0,    0,  531,  531,    0,    0,  527,  534,  534,  534,
      535,  535,  535,    0,    0,  533,  530,  534,    0,    0,
      530,  532,  536,  536,  536,  537,  537,  537,    0,    0,

      533,    0,  535,    0,    0,  536,  538,  538,  538,  539,
      539,  539,  537,  533,  534,    0,  534,  535,    0,    0,
      539,  540,  540,  540,  541,  541,  541,    0,    0,  536,
      535,    0,  537,    0,  536,    0,  541,  542,  542,  542,
        0,  537,    0,  538,    0,    0,  539,    0,    0,  539,
      543,  543,  543,    0,  544,  544,  544,    0,  540,    0,
        0,  541,  545,  545,  545,  541,  544,    0,    0,    0,
      543,  546,  546,  546,  542,  545,  547,  547,  547,  548,
      548,  548,  549,  549,  549,    0,    0,  543,    0,  547,
        0,  544,  550,  550,  550,  544,    0,    0,  543,  545,

        0,  551,  551,  551,  545,  553,  553,  553,  546,  552,
      552,  552,    0,  547,  551,    0,  548,    0,  547,  549,
        0,    0,  552,    0,  550,  554,  554,  554,    0,  550,
        0,    0,  555,  555,  555,    0,    0,  553,  551,  556,
      556,  556,  553,  551,  555,    0,  552,  557,  557,  557,
      554,  552,  550,  558,  558,  558,  559,  559,  559,  556,
        0,    0,  554,    0,    0,  553,  561,  561,  561,  555,
      562,  562,  562,  555,  557,  561,  556,    0,  554,    0,
      558,  563,  563,  563,  557,    0,    0,  556,    0,    0,
      558,    0,    0,  559,  570,  570,  570,  571,  571,  571,

        0,  563,  557,  561,  561,    0,    0,  562,  558,  572,
      572,  572,  573,  573,  573,  574,  574,  574,  563,  575,
      575,  575,  576,  576,  576,  577,  577,  577,    0,  563,
        0,  570,    0,    0,  571,    0,  578,  578,  578,  573,
        0,    0,  575,  579,  579,  579,  572,  576,    0,  573,
        0,    0,  574,  580,  580,  580,  575,    0,    0,  576,
        0,    0,  577,  578,    0,    0,  580,  573,    0,    0,
      575,    0,    0,  578,    0,  576,  581,  581,  581,    0,
      579,  582,  582,  582,  583,  583,  583,  584,  584,  584,
      580,  578,    0,  582,    0,  580,  585,  585,  585,    0,

      584,    0,    0,  581,    0,  586,  586,  586,    0,  587,
      587,  587,    0,  581,  588,  588,  588,  583,  582,    0,
        0,  583,  582,    0,  584,  589,  589,  589,    0,  584,
        0,  581,  586,  585,  590,  590,  590,  591,  591,  591,
        0,    0,  586,    0,    0,  583,  587,    0,    0,  591,
        0,  588,  592,  592,  592,  593,  593,  593,    0,    0,
      586,    0,  589,    0,  592,  594,  594,  594,  595,  595,
      595,  590,    0,    0,  591,  596,  596,  596,  591,  597,
      597,  597,  598,  598,  598,  600,  600,  600,    0,  592,
        0,    0,  593,  592,    0,    0,  595,  601,  601,  601,

        0,    0,  594,    0,    0,  595,    0,  605,  605,  605,
      600,    0,  596,    0,    0,    0,  597,    0,    0,  598,
        0,    0,  600,    0,  595,  606,  606,  606,    0,  601,
      605,  607,  607,  607,  601,  608,  608,  608,  600,  609,
      609,  609,    0,    0,  605,  607,    0,  610,  610,  610,
      606,    0,  608,  611,  611,  611,  610,  601,  605,  613,
      613,  613,  606,    0,  609,  614,  614,  614,  607,  615,
      615,  615,  608,  610,  607,    0,  609,    0,  606,    0,
        0,  608,    0,    0,  610,  610,  612,  612,  612,    0,
      611,    0,  609,    0,    0,  612,  613,  616,  616,  616,

        0,  610,  614,  617,  617,  617,  615,  619,  619,  619,
      620,  620,  620,    0,  617,    0,  624,  624,  624,  625,
      625,  625,    0,  612,  612,    0,  626,  626,  626,  627,
      627,  627,    0,    0,  616,  626,  628,  628,  628,    0,
      617,  624,    0,  617,  619,    0,    0,  620,  629,  629,
      629,    0,  627,  624,    0,    0,  625,  630,  630,  630,
      631,  631,  631,  626,  626,    0,  627,    0,    0,  624,
      632,  632,  632,  628,    0,  629,  637,  637,  637,    0,
      627,    0,    0,  632,    0,  629,    0,  631,  638,  638,
      638,    0,    0,    0,  630,    0,    0,  631,    0,  638,

      639,  639,  639,  629,  642,  642,  642,  632,    0,  640,
      640,  640,  632,  637,    0,  631,  641,  641,  641,  644,
      644,  644,  639,    0,    0,  638,  640,    0,  638,  645,
      645,  645,  644,  641,  646,  646,  646,  639,  649,  649,
      649,  642,  647,  647,  647,    0,  640,  650,  650,  650,
      639,    0,    0,  641,    0,  640,  644,  646,  651,  651,
      651,  644,  641,    0,    0,  647,  645,    0,    0,  650,
        0,  646,  653,  653,  653,  649,  654,  654,  654,  647,
      651,    0,    0,    0,  650,  646,    0,    0,    0,    0,
        0,    0,    0,  647,    0,  651,    0,  650,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  651,  653,
        0,    0,    0,  654,  677,  677,  677,  677,  678,  678,
      678,  678,  679,  679,  679,  679,  680,  680,  680,  680,
      681,  681,  681,  681,  682,  682,  682,  682,  683,  683,
      683,  683,  684,  684,  684,  684,  686,  686,  687,  687,
      689,    0,  689,  690,  690,  690,  690,  691,  691,  691,
      691,  692,  692,  692,  692,  694,  694,  695,  695,  697,
        0,  697,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[158] =
    {   0,
0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

extern int delphi_flex_debug;
int delphi_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up delphitext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( delphitext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	delphileng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char delphitext[YYLMAX];
char *yytext_ptr;
#line 1 "delphi.lpp"
#line 2 "delphi.lpp"
// --------------------------------------------------------------------------------
// MIT License
//
// Copyright (c) 2018 Jens Kallup
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// --------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <ctype.h>
#include <limits.h>
#include <sys/types.h>

#define YYDEBUG 1

#include "delphi.tab.hpp"

enum {
    T_NUMBER = 4,
    T_EQUAL = 5,
};

/**
 * Forward declerations
 **/
void Number ();
void HexaNumber ();

extern int yyerror(const char*);
extern int line_no;










#line 1884 "delphi.lex.cpp"

#define INITIAL 0
#define COMMENTS 1
#define PASCAL_COMMENTS 2
#define DELPHI_COMMENTS 3
#define OPADD 4
#define OPSUB 5
#define OPDIV 6
#define OPMOD 7
#define NUM 8
#define CREATE_CMD 9
#define CREATE_FILE 10
#define CREATE_TABLE 11
#define NEW_TABLE_STRUCT 12
#define TABLE_STRUCT_BEG 13
#define TABLE_STRUCT_END 14
#define DATA_TYPE 15
#define PRIMARY_KEY 16
#define DATA_LENBEG 17
#define DATA_LENEND 18
#define PRIKEYS_BEG 19
#define PRIKEYS_END 20
#define FILENAME 21

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int delphilex_destroy (void );

int delphiget_debug (void );

void delphiset_debug (int debug_flag  );

YY_EXTRA_TYPE delphiget_extra (void );

void delphiset_extra (YY_EXTRA_TYPE user_defined  );

FILE *delphiget_in (void );

void delphiset_in  (FILE * in_str  );

FILE *delphiget_out (void );

void delphiset_out  (FILE * out_str  );

int delphiget_leng (void );

char *delphiget_text (void );

int delphiget_lineno (void );

void delphiset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int delphiwrap (void );
#else
extern int delphiwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( delphitext, delphileng, 1, delphiout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( delphiin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( delphiin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, delphiin))==0 && ferror(delphiin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(delphiin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int delphilex (void);

#define YY_DECL int delphilex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after delphitext and delphileng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 79 "delphi.lpp"


#line 2095 "delphi.lex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)delphialloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in delphilex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! delphiin )
			delphiin = stdin;

		if ( ! delphiout )
			delphiout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			delphiensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				delphi_create_buffer(delphiin,YY_BUF_SIZE );
		}

		delphi_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of delphitext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 677 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4373 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < delphileng; ++yyl )
				if ( delphitext[yyl] == '\n' )
					   
    delphilineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 81 "delphi.lpp"
{ printf("dot\n");  return _DOT_; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 82 "delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 83 "delphi.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 86 "delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 88 "delphi.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 89 "delphi.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 91 "delphi.lpp"
{ BEGIN(COMMENTS); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 92 "delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 93 "delphi.lpp"
{ ++line_no; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "delphi.lpp"
;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "delphi.lpp"
{ BEGIN(PASCAL_COMMENTS); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 98 "delphi.lpp"
{ ++line_no; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "delphi.lpp"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 101 "delphi.lpp"
{ BEGIN(DELPHI_COMMENTS); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 102 "delphi.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 103 "delphi.lpp"
{ ++line_no; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 104 "delphi.lpp"
;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 106 "delphi.lpp"
{ printf("programs\n");	 	return _PROGRAM_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 107 "delphi.lpp"
{ printf("libary\n");	 	return _LIBRARY_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 108 "delphi.lpp"
{ printf("package\n");	 	return _PACKAGE_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 109 "delphi.lpp"
{ printf("unit\n");	 	return _UNIT_;    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 110 "delphi.lpp"
{ printf("uses\n");	 	return _USES_;    }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 111 "delphi.lpp"
{ printf("imple\n");	 	return _IMPLEMENTATION_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 112 "delphi.lpp"
{ printf("initiali\n"); 	return _INITIALIZATION_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 113 "delphi.lpp"
{ printf("finalization\n");	return _FINALIZATION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 114 "delphi.lpp"
{ printf("begin\n");	 	return _BEGIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 115 "delphi.lpp"
{ printf("end\n");	 	return _END_;   }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 116 "delphi.lpp"
{ printf("downto\n");		return _DOWNTO_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 117 "delphi.lpp"
{ printf("to\n");		return _TO_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 118 "delphi.lpp"
{ printf("implements\n");	return _IMPLEMENTS_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 119 "delphi.lpp"
{ printf("case\n");		return _CASE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 120 "delphi.lpp"
{ printf("boolean\n");		return _BOOLEAN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 121 "delphi.lpp"
{ printf("false\n");		return _FALSE_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 122 "delphi.lpp"
{ printf("true\n");		return _TRUE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 123 "delphi.lpp"
{ printf("byte\n");		return _BYTE_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 124 "delphi.lpp"
{ printf("char\n");		return _CHAR_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 125 "delphi.lpp"
{ printf("shortint\n"); 	return _SHORTINT_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 126 "delphi.lpp"
{ printf("word\n");		return _WORD_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 127 "delphi.lpp"
{ printf("smallint\n"); 	return _SMALLINT_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 128 "delphi.lpp"
{ printf("longword\n"); 	return _LONGWORD_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 129 "delphi.lpp"
{ printf("cardinal\n"); 	return _CARDINAL_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 130 "delphi.lpp"
{ printf("longint\n");		return _LONGINT_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 131 "delphi.lpp"
{ printf("integer\n");		return _INTEGER_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 132 "delphi.lpp"
{ printf("single\n");		return _SINGLE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 133 "delphi.lpp"
{ printf("currency\n"); 	return _CURRENCY_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 134 "delphi.lpp"
{ printf("double\n");		return _DOUBLE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 135 "delphi.lpp"
{ printf("extended\n"); 	return _EXTENDED_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 136 "delphi.lpp"
{ printf("int64\n");		return _INT64_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 137 "delphi.lpp"
{ printf("string\n");		return _STRINGTYPE_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 138 "delphi.lpp"
{ printf("not\n");	 	return _NOT_;   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 139 "delphi.lpp"
{ printf("in\n");	 	return _IN_;	}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 140 "delphi.lpp"
{ printf("nil\n");	 	return _NIL_;	}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 141 "delphi.lpp"
{ printf("or\n");	 	return _OR_;	}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 142 "delphi.lpp"
{ printf("xor\n");	 	return _XOR_;	}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 143 "delphi.lpp"
{ printf("and\n");	 	return _AND_;   }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 144 "delphi.lpp"
{ printf("div\n");	 	return _DIV_;   }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 145 "delphi.lpp"
{ printf("mod\n");	 	return _MOD_;   }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 146 "delphi.lpp"
{ printf("shl\n");	 	return _SHL_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 147 "delphi.lpp"
{ printf("shr\n");	 	return _SHR_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 148 "delphi.lpp"
{ printf("at\n");	 	return _AT_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 149 "delphi.lpp"
{ printf("do\n");	 	return _DO_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 150 "delphi.lpp"
{ printf("for\n");	 	return _FOR_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 151 "delphi.lpp"
{ printf("var\n"); 	 	return _VAR_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 152 "delphi.lpp"
{ printf("on\n");		return _ON_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 153 "delphi.lpp"
{ printf("is\n");		return _IS_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 154 "delphi.lpp"
{ printf("default\n");   	return _DEFAULT_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 155 "delphi.lpp"
{ printf("nodefault\n"); 	return _NODEFAULT_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 156 "delphi.lpp"
{ printf("read\n");		return _READ_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 157 "delphi.lpp"
{ printf("readonly\n"); 	return _READONLY_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 158 "delphi.lpp"
{ printf("write\n");		return _WRITE_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 159 "delphi.lpp"
{ printf("writeonly\n");	return _WRITEONLY_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 160 "delphi.lpp"
{ printf("stored\n");		return _STORED_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 161 "delphi.lpp"
{ printf("register\n");		return _REGISTER_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 162 "delphi.lpp"
{ printf("abstract\n");		return _ABSTRACT_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 163 "delphi.lpp"
{ printf("virtual\n");		return _VIRTUAL_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 164 "delphi.lpp"
{ printf("threadvar\n");	return _THREADVAR_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 165 "delphi.lpp"
{ printf("except\n");		return _EXCEPT_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 166 "delphi.lpp"
{ printf("index\n");		return _INDEX_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 167 "delphi.lpp"
{ printf("dispid\n");		return _DISPID_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 168 "delphi.lpp"
{ printf("dispinterface\n");	return _DISPINTERFACE_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 169 "delphi.lpp"
{ printf("interface\n");	return _INTERFACE_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 170 "delphi.lpp"
{ printf("if\n");		return _IF_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 171 "delphi.lpp"
{ printf("else\n");		return _ELSE_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 172 "delphi.lpp"
{ printf("then\n");		return _THEN_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 173 "delphi.lpp"
{ printf("repeat\n");		return _REPEAT_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 174 "delphi.lpp"
{ printf("until\n");		return _UNTIL_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 175 "delphi.lpp"
{ printf("while\n");		return _WHILE_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 176 "delphi.lpp"
{ printf("pascal\n");		return _PASCAL_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 177 "delphi.lpp"
{ printf("cdecl\n");		return _CDECL_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 178 "delphi.lpp"
{ printf("stdcall\n");		return _STDCALL_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 179 "delphi.lpp"
{ printf("safecall\n"); 	return _SAFECALL_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 180 "delphi.lpp"
{ printf("overload\n"); 	return _OVERLOAD_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 181 "delphi.lpp"
{ printf("override\n"); 	return _OVERRIDE_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 182 "delphi.lpp"
{ printf("class\n");		return _CLASS_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 183 "delphi.lpp"
{ printf("try\n");		return _TRY_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 184 "delphi.lpp"
{ printf("finally\n");		return _FINALLY_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 185 "delphi.lpp"
{ printf("inherited\n");	return _INHERITED_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 186 "delphi.lpp"
{ printf("constructor\n");	return _CONSTRUCTOR_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 187 "delphi.lpp"
{ printf("destructor\n");	return _DESTRUCTOR_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 188 "delphi.lpp"
{ printf("public\n");		return _PUBLIC_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 189 "delphi.lpp"
{ printf("protected\n");	return _PROTECTED_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 190 "delphi.lpp"
{ printf("private\n");		return _PRIVATE_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 191 "delphi.lpp"
{ printf("property\n"); 	return _PROPERTY_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 192 "delphi.lpp"
{ printf("published\n");	return _PUBLISHED_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 193 "delphi.lpp"
{ printf("dynamic\n");		return _DYNAMIC_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 194 "delphi.lpp"
{ printf("absolute\n"); 	return _ABSOLUTE_; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 195 "delphi.lpp"
{ printf("packed\n");		return _PACKED_; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 196 "delphi.lpp"
{ printf("record\n");		return _RECORD_; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 197 "delphi.lpp"
{ printf("set\n");		return _SET_; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 198 "delphi.lpp"
{ printf("array\n");		return _ARRAY_; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 199 "delphi.lpp"
{ printf("of\n");		return _OF_; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 200 "delphi.lpp"
{ printf("reintroduce\n");	return _REINTRODUCE_; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 201 "delphi.lpp"
{ printf("message\n");		return _MESSAGE_; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 202 "delphi.lpp"
{ printf("type\n");		return _TYPE_; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 203 "delphi.lpp"
{ printf("procedure\n");	return _PROCEDURE_; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 204 "delphi.lpp"
{ printf("function\n"); 	return _FUNCTION_; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 207 "delphi.lpp"
{ printf("file\n");	return _FILE_;  }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 209 "delphi.lpp"
{ printf("<=\n");	return _LESSER_THAN_;  }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 210 "delphi.lpp"
{ printf(">=\n");	return _GREATER_THAN_; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 211 "delphi.lpp"
{ printf("=>\n");	return _GREATER_THAN_; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 212 "delphi.lpp"
{ printf("<>\n");	return _NOT_EQUAL_;    }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 214 "delphi.lpp"
{ printf("..\n");	return _DBL_POINT_;  }	
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 215 "delphi.lpp"
{ printf(":=\n");	return _ASSIGNMENT_; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 217 "delphi.lpp"
{ printf("idname: %s\n", delphitext);   return _NAME_; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 219 "delphi.lpp"
{ printf("string lit\n");	return _STRING_LITTERAL_; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 220 "delphi.lpp"
{ printf("string\n");		return _STRING_; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 223 "delphi.lpp"
{ return FILENAME; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 225 "delphi.lpp"
{ printf("new: file  \n"); BEGIN(CREATE_FILE); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 226 "delphi.lpp"
{ printf("new: table \n"); BEGIN(CREATE_TABLE);  }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 228 "delphi.lpp"
{
printf("wwwmos\n");
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("filserl1: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 236 "delphi.lpp"
{
printf("ccmos\n");
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("filserl2: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 245 "delphi.lpp"
{
printf("fos\n");
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("tabsel1: -> %s\n",txt);
    free(txt);
    BEGIN(NEW_TABLE_STRUCT);
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 253 "delphi.lpp"
{
printf("mos\n");
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("tabsel2: -> %s\n",txt);
    free(txt);
    BEGIN(NEW_TABLE_STRUCT);
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 262 "delphi.lpp"
{
    printf("beg\n");
    BEGIN(TABLE_STRUCT_BEG);
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 267 "delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    if (strcmp(txt,"primary") == 0) {
        printf("a key\n");
        BEGIN(PRIMARY_KEY);
    }
    else {
        printf("ident: %s\n",delphitext);
        BEGIN(DATA_TYPE);
    }
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 279 "delphi.lpp"
{ printf("table struct ok.\n"); BEGIN(INITIAL); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 281 "delphi.lpp"
{
    printf(" a key is given...\n");
    BEGIN(PRIKEYS_BEG);
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 285 "delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("1prikey: %s\n",txt);
    free(txt);
    BEGIN(PRIKEYS_END);
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 292 "delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("2prikey: %s\n",txt);
    free(txt);
    BEGIN(PRIKEYS_BEG);
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 299 "delphi.lpp"
{
    printf("tabselle has prikeys.\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 304 "delphi.lpp"
{ printf(" B, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 305 "delphi.lpp"
{ printf(" L, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 306 "delphi.lpp"
{ printf(" N, \n"); BEGIN(DATA_LENBEG); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 307 "delphi.lpp"
{ printf(" C, \n"); BEGIN(DATA_LENBEG); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 308 "delphi.lpp"
{ printf(" D, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 310 "delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("1>numser: %s\n",txt);
    free(txt);
    BEGIN(TABLE_STRUCT_END);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 317 "delphi.lpp"
{
    char *txt = (char*) malloc(strlen(delphitext)+1);
    strcpy(txt,delphitext);
    printf("2>numser: %s\n",txt);
    free(txt);
    printf("nax\n");
    BEGIN(TABLE_STRUCT_BEG);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 326 "delphi.lpp"
{ printf("num: %d\n", atoi(delphitext)); return _NUMBER_; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 327 "delphi.lpp"
{ printf("Num: %d\n", atoi(delphitext)); return _NUMBER_; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 330 "delphi.lpp"
{ HexaNumber(); return T_NUMBER; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 332 "delphi.lpp"
{ printf("%c\n", *delphitext); return *delphitext; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 334 "delphi.lpp"
{ }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 335 "delphi.lpp"
{ ++line_no; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 336 "delphi.lpp"
;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENTS):
case YY_STATE_EOF(PASCAL_COMMENTS):
case YY_STATE_EOF(DELPHI_COMMENTS):
case YY_STATE_EOF(OPADD):
case YY_STATE_EOF(OPSUB):
case YY_STATE_EOF(OPDIV):
case YY_STATE_EOF(OPMOD):
case YY_STATE_EOF(NUM):
case YY_STATE_EOF(CREATE_CMD):
case YY_STATE_EOF(CREATE_FILE):
case YY_STATE_EOF(CREATE_TABLE):
case YY_STATE_EOF(NEW_TABLE_STRUCT):
case YY_STATE_EOF(TABLE_STRUCT_BEG):
case YY_STATE_EOF(TABLE_STRUCT_END):
case YY_STATE_EOF(DATA_TYPE):
case YY_STATE_EOF(PRIMARY_KEY):
case YY_STATE_EOF(DATA_LENBEG):
case YY_STATE_EOF(DATA_LENEND):
case YY_STATE_EOF(PRIKEYS_BEG):
case YY_STATE_EOF(PRIKEYS_END):
case YY_STATE_EOF(FILENAME):
#line 337 "delphi.lpp"
{ return 0; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 338 "delphi.lpp"
ECHO;
	YY_BREAK
#line 3087 "delphi.lex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed delphiin at a new source and called
			 * delphilex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = delphiin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( delphiwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * delphitext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of delphilex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			delphirestart(delphiin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) delphirealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 677 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 677 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 676);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up delphitext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --delphilineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					delphirestart(delphiin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( delphiwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve delphitext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    delphilineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void delphirestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        delphiensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            delphi_create_buffer(delphiin,YY_BUF_SIZE );
	}

	delphi_init_buffer(YY_CURRENT_BUFFER,input_file );
	delphi_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void delphi_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		delphipop_buffer_state();
	 *		delphipush_buffer_state(new_buffer);
     */
	delphiensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	delphi_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (delphiwrap()) processing, but the only time this flag
	 * is looked at is after delphiwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void delphi_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	delphiin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE delphi_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) delphialloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in delphi_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) delphialloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in delphi_create_buffer()" );

	b->yy_is_our_buffer = 1;

	delphi_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with delphi_create_buffer()
 * 
 */
    void delphi_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		delphifree((void *) b->yy_ch_buf  );

	delphifree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a delphirestart() or at EOF.
 */
    static void delphi_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	delphi_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then delphi_init_buffer was _probably_
     * called from delphirestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void delphi_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		delphi_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void delphipush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	delphiensure_buffer_stack();

	/* This block is copied from delphi_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from delphi_switch_to_buffer. */
	delphi_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void delphipop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	delphi_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		delphi_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void delphiensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)delphialloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in delphiensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)delphirealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in delphiensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE delphi_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) delphialloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in delphi_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	delphi_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to delphilex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       delphi_scan_bytes() instead.
 */
YY_BUFFER_STATE delphi_scan_string (yyconst char * yystr )
{
    
	return delphi_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to delphilex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE delphi_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) delphialloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in delphi_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = delphi_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in delphi_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up delphitext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		delphitext[delphileng] = (yy_hold_char); \
		(yy_c_buf_p) = delphitext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		delphileng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int delphiget_lineno  (void)
{
        
    return delphilineno;
}

/** Get the input stream.
 * 
 */
FILE *delphiget_in  (void)
{
        return delphiin;
}

/** Get the output stream.
 * 
 */
FILE *delphiget_out  (void)
{
        return delphiout;
}

/** Get the length of the current token.
 * 
 */
int delphiget_leng  (void)
{
        return delphileng;
}

/** Get the current token.
 * 
 */

char *delphiget_text  (void)
{
        return delphitext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void delphiset_lineno (int  line_number )
{
    
    delphilineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see delphi_switch_to_buffer
 */
void delphiset_in (FILE *  in_str )
{
        delphiin = in_str ;
}

void delphiset_out (FILE *  out_str )
{
        delphiout = out_str ;
}

int delphiget_debug  (void)
{
        return delphi_flex_debug;
}

void delphiset_debug (int  bdebug )
{
        delphi_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from delphilex_destroy(), so don't allocate here.
     */

    /* We do not touch delphilineno unless the option is enabled. */
    delphilineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    delphiin = stdin;
    delphiout = stdout;
#else
    delphiin = (FILE *) 0;
    delphiout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * delphilex_init()
     */
    return 0;
}

/* delphilex_destroy is for both reentrant and non-reentrant scanners. */
int delphilex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		delphi_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		delphipop_buffer_state();
	}

	/* Destroy the stack itself. */
	delphifree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    delphifree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * delphilex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *delphialloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *delphirealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void delphifree (void * ptr )
{
	free( (char *) ptr );	/* see delphirealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 338 "delphi.lpp"



void Number () {
    yylval.val = atol(delphitext);
}

void HexaNumber () {
    yylval.val = (unsigned int) strtol(delphitext, (char **)NULL, 16);
}

